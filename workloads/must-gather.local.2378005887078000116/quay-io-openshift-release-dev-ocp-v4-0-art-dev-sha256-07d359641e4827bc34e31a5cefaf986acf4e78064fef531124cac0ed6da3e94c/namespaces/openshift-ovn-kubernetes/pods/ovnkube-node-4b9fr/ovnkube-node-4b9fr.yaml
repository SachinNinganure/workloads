---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    networkoperator.openshift.io/ip-family-mode: single-stack
  creationTimestamp: "2023-01-09T04:39:03Z"
  generateName: ovnkube-node-
  labels:
    app: ovnkube-node
    component: network
    controller-revision-hash: 846ff6444c
    kubernetes.io/os: linux
    openshift.io/component: network
    pod-template-generation: "1"
    type: infra
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:networkoperator.openshift.io/ip-family-mode: {}
          f:target.workload.openshift.io/management: {}
        f:generateName: {}
        f:labels:
          .: {}
          f:app: {}
          f:component: {}
          f:controller-revision-hash: {}
          f:kubernetes.io/os: {}
          f:openshift.io/component: {}
          f:pod-template-generation: {}
          f:type: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"a3dc2142-2757-4f53-8296-f18a872cae65"}: {}
      f:spec:
        f:affinity:
          .: {}
          f:nodeAffinity:
            .: {}
            f:requiredDuringSchedulingIgnoredDuringExecution: {}
        f:containers:
          k:{"name":"kube-rbac-proxy"}:
            .: {}
            f:command: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":9103,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:hostPort: {}
                f:name: {}
                f:protocol: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                .: {}
                f:mountPath: {}
                f:name: {}
                f:readOnly: {}
          k:{"name":"kube-rbac-proxy-ovn-metrics"}:
            .: {}
            f:command: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":9105,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:hostPort: {}
                f:name: {}
                f:protocol: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                .: {}
                f:mountPath: {}
                f:name: {}
                f:readOnly: {}
          k:{"name":"ovn-acl-logging"}:
            .: {}
            f:command: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/run/ovn/"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/var/log/ovn"}:
                .: {}
                f:mountPath: {}
                f:name: {}
          k:{"name":"ovn-controller"}:
            .: {}
            f:command: {}
            f:env:
              .: {}
              k:{"name":"K8S_NODE"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef: {}
              k:{"name":"OVN_LOG_LEVEL"}:
                .: {}
                f:name: {}
                f:value: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:securityContext:
              .: {}
              f:privileged: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/dev/log"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/env"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/etc/openvswitch"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/etc/ovn/"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/ovn-ca"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/ovn-cert"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/run/openvswitch"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/run/ovn/"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/var/lib/openvswitch"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/var/log/ovn"}:
                .: {}
                f:mountPath: {}
                f:name: {}
          k:{"name":"ovnkube-node"}:
            .: {}
            f:command: {}
            f:env:
              .: {}
              k:{"name":"K8S_NODE"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef: {}
              k:{"name":"KUBERNETES_SERVICE_HOST"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"KUBERNETES_SERVICE_PORT"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"OVN_CONTROLLER_INACTIVITY_PROBE"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                .: {}
                f:name: {}
                f:value: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:lifecycle:
              .: {}
              f:preStop:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":29103,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:hostPort: {}
                f:name: {}
                f:protocol: {}
            f:readinessProbe:
              .: {}
              f:exec:
                .: {}
                f:command: {}
              f:failureThreshold: {}
              f:initialDelaySeconds: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:securityContext:
              .: {}
              f:privileged: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/cni-bin-dir"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/env"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/etc/cni/net.d"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/etc/openvswitch"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/etc/ovn/"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/etc/systemd/system"}:
                .: {}
                f:mountPath: {}
                f:name: {}
                f:readOnly: {}
              k:{"mountPath":"/host"}:
                .: {}
                f:mountPath: {}
                f:mountPropagation: {}
                f:name: {}
                f:readOnly: {}
              k:{"mountPath":"/ovn-ca"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/ovn-cert"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/run/netns"}:
                .: {}
                f:mountPath: {}
                f:mountPropagation: {}
                f:name: {}
                f:readOnly: {}
              k:{"mountPath":"/run/openvswitch"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/run/ovn-kubernetes/"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/run/ovn/"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/run/ovnkube-config/"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/var/lib/cni/networks/ovn-k8s-cni-overlay"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/var/lib/openvswitch"}:
                .: {}
                f:mountPath: {}
                f:name: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:hostNetwork: {}
        f:hostPID: {}
        f:nodeSelector: {}
        f:priorityClassName: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:serviceAccount: {}
        f:serviceAccountName: {}
        f:terminationGracePeriodSeconds: {}
        f:tolerations: {}
        f:volumes:
          .: {}
          k:{"name":"env-overrides"}:
            .: {}
            f:configMap:
              .: {}
              f:defaultMode: {}
              f:name: {}
              f:optional: {}
            f:name: {}
          k:{"name":"etc-openvswitch"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"host-cni-bin"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"host-cni-netd"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"host-run-netns"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"host-run-ovn-kubernetes"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"host-slash"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"host-var-lib-cni-networks-ovn-kubernetes"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"log-socket"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"node-log"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"ovn-ca"}:
            .: {}
            f:configMap:
              .: {}
              f:defaultMode: {}
              f:name: {}
            f:name: {}
          k:{"name":"ovn-cert"}:
            .: {}
            f:name: {}
            f:secret:
              .: {}
              f:defaultMode: {}
              f:secretName: {}
          k:{"name":"ovn-node-metrics-cert"}:
            .: {}
            f:name: {}
            f:secret:
              .: {}
              f:defaultMode: {}
              f:optional: {}
              f:secretName: {}
          k:{"name":"ovnkube-config"}:
            .: {}
            f:configMap:
              .: {}
              f:defaultMode: {}
              f:name: {}
            f:name: {}
          k:{"name":"run-openvswitch"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"run-ovn"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"systemd-units"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"var-lib-openvswitch"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
    manager: kube-controller-manager
    operation: Update
    time: "2023-01-09T04:39:03Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.0.199.219"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kubelet
    operation: Update
    subresource: status
    time: "2023-01-09T04:40:43Z"
  name: ovnkube-node-4b9fr
  namespace: openshift-ovn-kubernetes
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: DaemonSet
    name: ovnkube-node
    uid: a3dc2142-2757-4f53-8296-f18a872cae65
  resourceVersion: "3714"
  uid: 044e2c3e-8fc5-430e-a4d4-b857992ef386
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchFields:
          - key: metadata.name
            operator: In
            values:
            - ip-10-0-199-219.us-east-2.compute.internal
  containers:
  - command:
    - /bin/bash
    - -c
    - "set -e\nif [[ -f \"/env/${K8S_NODE}\" ]]; then\n  set -o allexport\n  source
      \"/env/${K8S_NODE}\"\n  set +o allexport\nfi  \n\necho \"$(date -Iseconds) -
      starting ovn-controller\"\nexec ovn-controller unix:/var/run/openvswitch/db.sock
      -vfile:off \\\n  --no-chdir --pidfile=/var/run/ovn/ovn-controller.pid \\\n  --syslog-method=\"null\"
      \\\n  --log-file=/var/log/ovn/acl-audit-log.log \\\n  -vFACILITY:\"local0\"
      \\\n  -p /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt \\\n
      \ -vconsole:\"${OVN_LOG_LEVEL}\" -vconsole:\"acl_log:off\" \\\n  -vPATTERN:console:\"%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
      \\\n  -vsyslog:\"acl_log:info\" \\\n  -vfile:\"acl_log:info\"\n"
    env:
    - name: OVN_LOG_LEVEL
      value: info
    - name: K8S_NODE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
    imagePullPolicy: IfNotPresent
    name: ovn-controller
    resources:
      requests:
        cpu: 10m
        memory: 300Mi
    securityContext:
      privileged: true
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /run/openvswitch
      name: run-openvswitch
    - mountPath: /run/ovn/
      name: run-ovn
    - mountPath: /etc/openvswitch
      name: etc-openvswitch
    - mountPath: /etc/ovn/
      name: etc-openvswitch
    - mountPath: /var/lib/openvswitch
      name: var-lib-openvswitch
    - mountPath: /env
      name: env-overrides
    - mountPath: /ovn-cert
      name: ovn-cert
    - mountPath: /ovn-ca
      name: ovn-ca
    - mountPath: /var/log/ovn
      name: node-log
    - mountPath: /dev/log
      name: log-socket
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-8btc8
      readOnly: true
  - command:
    - /bin/bash
    - -c
    - "set -euo pipefail\n\n# Rotate audit log files when then get to max size (in
      bytes)\nMAXFILESIZE=$(( \"50\"*1000000 )) \nLOGFILE=/var/log/ovn/acl-audit-log.log\nCONTROLLERPID=$(cat
      /run/ovn/ovn-controller.pid)\n\n# Redirect err to null so no messages are shown
      upon rotation\ntail -F ${LOGFILE} 2> /dev/null &\n\nwhile true\ndo\n  # Make
      sure ovn-controller's logfile exists, and get current size in bytes \n  if [
      -f \"$LOGFILE\" ]; then \n    file_size=`du -b ${LOGFILE} | tr -s '\\t' ' '
      | cut -d' ' -f1`\n  else \n    ovs-appctl -t /var/run/ovn/ovn-controller.${CONTROLLERPID}.ctl
      vlog/reopen\n    file_size=`du -b ${LOGFILE} | tr -s '\\t' ' ' | cut -d' ' -f1`\n
      \ fi \n  \n  if [ $file_size -gt $MAXFILESIZE ];then\n    echo \"Rotating OVN
      ACL Log File\"\n    timestamp=`date '+%Y-%m-%dT%H-%M-%S'`\n    mv ${LOGFILE}
      /var/log/ovn/acl-audit-log.$timestamp.log\n    ovs-appctl -t /run/ovn/ovn-controller.${CONTROLLERPID}.ctl
      vlog/reopen\n    CONTROLLERPID=$(cat /run/ovn/ovn-controller.pid)\n  fi\n\n
      \ # sleep for 30 seconds to avoid wasting CPU \n  sleep 30 \ndone\n"
    image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
    imagePullPolicy: IfNotPresent
    name: ovn-acl-logging
    resources:
      requests:
        cpu: 10m
        memory: 20Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /var/log/ovn
      name: node-log
    - mountPath: /run/ovn/
      name: run-ovn
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-8btc8
      readOnly: true
  - command:
    - /bin/bash
    - -c
    - |
      #!/bin/bash
      set -euo pipefail
      TLS_PK=/etc/pki/tls/metrics-cert/tls.key
      TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
      # As the secret mount is optional we must wait for the files to be present.
      # The service is created in monitor.yaml and this is created in sdn.yaml.
      # If it isn't created there is probably an issue so we want to crashloop.
      retries=0
      TS=$(date +%s)
      WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
      HAS_LOGGED_INFO=0

      log_missing_certs(){
          CUR_TS=$(date +%s)
          if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
            echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
          elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
            echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
            HAS_LOGGED_INFO=1
          fi
      }
      while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
        log_missing_certs
        sleep 5
      done

      echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
      exec /usr/bin/kube-rbac-proxy \
        --logtostderr \
        --secure-listen-address=:9103 \
        --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
        --upstream=http://127.0.0.1:29103/ \
        --tls-private-key-file=${TLS_PK} \
        --tls-cert-file=${TLS_CERT}
    image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
    imagePullPolicy: IfNotPresent
    name: kube-rbac-proxy
    ports:
    - containerPort: 9103
      hostPort: 9103
      name: https
      protocol: TCP
    resources:
      requests:
        cpu: 10m
        memory: 20Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /etc/pki/tls/metrics-cert
      name: ovn-node-metrics-cert
      readOnly: true
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-8btc8
      readOnly: true
  - command:
    - /bin/bash
    - -c
    - |
      #!/bin/bash
      set -euo pipefail
      TLS_PK=/etc/pki/tls/metrics-cert/tls.key
      TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
      # As the secret mount is optional we must wait for the files to be present.
      # The service is created in monitor.yaml and this is created in sdn.yaml.
      # If it isn't created there is probably an issue so we want to crashloop.
      retries=0
      TS=$(date +%s)
      WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
      HAS_LOGGED_INFO=0

      log_missing_certs(){
          CUR_TS=$(date +%s)
          if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
            echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
          elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
            echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
            HAS_LOGGED_INFO=1
          fi
      }
      while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
        log_missing_certs
        sleep 5
      done

      echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
      exec /usr/bin/kube-rbac-proxy \
        --logtostderr \
        --secure-listen-address=:9105 \
        --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
        --upstream=http://127.0.0.1:29105/ \
        --tls-private-key-file=${TLS_PK} \
        --tls-cert-file=${TLS_CERT}
    image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
    imagePullPolicy: IfNotPresent
    name: kube-rbac-proxy-ovn-metrics
    ports:
    - containerPort: 9105
      hostPort: 9105
      name: https
      protocol: TCP
    resources:
      requests:
        cpu: 10m
        memory: 20Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /etc/pki/tls/metrics-cert
      name: ovn-node-metrics-cert
      readOnly: true
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-8btc8
      readOnly: true
  - command:
    - /bin/bash
    - -c
    - |
      set -xe
      if [[ -f "/env/${K8S_NODE}" ]]; then
        set -o allexport
        source "/env/${K8S_NODE}"
        set +o allexport
      fi
      cp -f /usr/libexec/cni/ovn-k8s-cni-overlay /cni-bin-dir/
      ovn_config_namespace=openshift-ovn-kubernetes
      echo "I$(date "+%m%d %H:%M:%S.%N") - disable conntrack on geneve port"
      iptables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
      iptables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
      ip6tables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
      ip6tables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
      echo "I$(date "+%m%d %H:%M:%S.%N") - starting ovnkube-node"

      if [ "shared" == "shared" ]; then
        gateway_mode_flags="--gateway-mode shared --gateway-interface br-ex"
      elif [ "shared" == "local" ]; then
        gateway_mode_flags="--gateway-mode local --gateway-interface br-ex"
      else
        echo "Invalid OVN_GATEWAY_MODE: \"shared\". Must be \"local\" or \"shared\"."
        exit 1
      fi

      export_network_flows_flags=
      if [[ -n "${NETFLOW_COLLECTORS}" ]] ; then
        export_network_flows_flags="--netflow-targets ${NETFLOW_COLLECTORS}"
      fi
      if [[ -n "${SFLOW_COLLECTORS}" ]] ; then
        export_network_flows_flags="$export_network_flows_flags --sflow-targets ${SFLOW_COLLECTORS}"
      fi
      if [[ -n "${IPFIX_COLLECTORS}" ]] ; then
        export_network_flows_flags="$export_network_flows_flags --ipfix-targets ${IPFIX_COLLECTORS}"
      fi
      if [[ -n "${IPFIX_CACHE_MAX_FLOWS}" ]] ; then
        export_network_flows_flags="$export_network_flows_flags --ipfix-cache-max-flows ${IPFIX_CACHE_MAX_FLOWS}"
      fi
      if [[ -n "${IPFIX_CACHE_ACTIVE_TIMEOUT}" ]] ; then
        export_network_flows_flags="$export_network_flows_flags --ipfix-cache-active-timeout ${IPFIX_CACHE_ACTIVE_TIMEOUT}"
      fi
      if [[ -n "${IPFIX_SAMPLING}" ]] ; then
        export_network_flows_flags="$export_network_flows_flags --ipfix-sampling ${IPFIX_SAMPLING}"
      fi
      gw_interface_flag=
      # if br-ex1 is configured on the node, we want to use it for external gateway traffic
      if [ -d /sys/class/net/br-ex1 ]; then
        gw_interface_flag="--exgw-interface=br-ex1"
      fi

      node_mgmt_port_netdev_flags=
      if [[ -n "${OVNKUBE_NODE_MGMT_PORT_NETDEV}" ]] ; then
        node_mgmt_port_netdev_flags="--ovnkube-node-mgmt-port-netdev ${OVNKUBE_NODE_MGMT_PORT_NETDEV}"
      fi

      exec /usr/bin/ovnkube --init-node "${K8S_NODE}" \
        --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
        --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
        --nb-client-privkey /ovn-cert/tls.key \
        --nb-client-cert /ovn-cert/tls.crt \
        --nb-client-cacert /ovn-ca/ca-bundle.crt \
        --nb-cert-common-name "ovn" \
        --sb-client-privkey /ovn-cert/tls.key \
        --sb-client-cert /ovn-cert/tls.crt \
        --sb-client-cacert /ovn-ca/ca-bundle.crt \
        --sb-cert-common-name "ovn" \
        --config-file=/run/ovnkube-config/ovnkube.conf \
        --loglevel "${OVN_KUBE_LOG_LEVEL}" \
        --inactivity-probe="${OVN_CONTROLLER_INACTIVITY_PROBE}" \
        ${gateway_mode_flags} \
        --metrics-bind-address "127.0.0.1:29103" \
        --ovn-metrics-bind-address "127.0.0.1:29105" \
        --metrics-enable-pprof \
        --export-ovs-metrics \
        --disable-snat-multiple-gws \
        ${export_network_flows_flags} \
        ${gw_interface_flag}
    env:
    - name: KUBERNETES_SERVICE_PORT
      value: "6443"
    - name: KUBERNETES_SERVICE_HOST
      value: api-int.sn-loggvls-jsm.qe.devcluster.openshift.com
    - name: OVN_CONTROLLER_INACTIVITY_PROBE
      value: "180000"
    - name: OVN_KUBE_LOG_LEVEL
      value: "4"
    - name: K8S_NODE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
    imagePullPolicy: IfNotPresent
    lifecycle:
      preStop:
        exec:
          command:
          - rm
          - -f
          - /etc/cni/net.d/10-ovn-kubernetes.conf
    name: ovnkube-node
    ports:
    - containerPort: 29103
      hostPort: 29103
      name: metrics-port
      protocol: TCP
    readinessProbe:
      exec:
        command:
        - test
        - -f
        - /etc/cni/net.d/10-ovn-kubernetes.conf
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      requests:
        cpu: 10m
        memory: 300Mi
    securityContext:
      privileged: true
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /etc/systemd/system
      name: systemd-units
      readOnly: true
    - mountPath: /host
      mountPropagation: HostToContainer
      name: host-slash
      readOnly: true
    - mountPath: /run/ovn-kubernetes/
      name: host-run-ovn-kubernetes
    - mountPath: /run/netns
      mountPropagation: HostToContainer
      name: host-run-netns
      readOnly: true
    - mountPath: /cni-bin-dir
      name: host-cni-bin
    - mountPath: /etc/cni/net.d
      name: host-cni-netd
    - mountPath: /var/lib/cni/networks/ovn-k8s-cni-overlay
      name: host-var-lib-cni-networks-ovn-kubernetes
    - mountPath: /run/openvswitch
      name: run-openvswitch
    - mountPath: /run/ovn/
      name: run-ovn
    - mountPath: /etc/openvswitch
      name: etc-openvswitch
    - mountPath: /etc/ovn/
      name: etc-openvswitch
    - mountPath: /var/lib/openvswitch
      name: var-lib-openvswitch
    - mountPath: /run/ovnkube-config/
      name: ovnkube-config
    - mountPath: /env
      name: env-overrides
    - mountPath: /ovn-cert
      name: ovn-cert
    - mountPath: /ovn-ca
      name: ovn-ca
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-8btc8
      readOnly: true
  dnsPolicy: Default
  enableServiceLinks: true
  hostNetwork: true
  hostPID: true
  nodeName: ip-10-0-199-219.us-east-2.compute.internal
  nodeSelector:
    beta.kubernetes.io/os: linux
  preemptionPolicy: PreemptLowerPriority
  priority: 2000001000
  priorityClassName: system-node-critical
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: ovn-kubernetes-node
  serviceAccountName: ovn-kubernetes-node
  terminationGracePeriodSeconds: 30
  tolerations:
  - operator: Exists
  volumes:
  - hostPath:
      path: /etc/systemd/system
      type: ""
    name: systemd-units
  - hostPath:
      path: /
      type: ""
    name: host-slash
  - hostPath:
      path: /run/netns
      type: ""
    name: host-run-netns
  - hostPath:
      path: /var/lib/openvswitch/data
      type: ""
    name: var-lib-openvswitch
  - hostPath:
      path: /etc/openvswitch
      type: ""
    name: etc-openvswitch
  - hostPath:
      path: /var/run/openvswitch
      type: ""
    name: run-openvswitch
  - hostPath:
      path: /var/run/ovn
      type: ""
    name: run-ovn
  - hostPath:
      path: /var/log/ovn
      type: ""
    name: node-log
  - hostPath:
      path: /dev/log
      type: ""
    name: log-socket
  - hostPath:
      path: /run/ovn-kubernetes
      type: ""
    name: host-run-ovn-kubernetes
  - hostPath:
      path: /var/lib/cni/bin
      type: ""
    name: host-cni-bin
  - hostPath:
      path: /var/run/multus/cni/net.d
      type: ""
    name: host-cni-netd
  - hostPath:
      path: /var/lib/cni/networks/ovn-k8s-cni-overlay
      type: ""
    name: host-var-lib-cni-networks-ovn-kubernetes
  - configMap:
      defaultMode: 420
      name: ovnkube-config
    name: ovnkube-config
  - configMap:
      defaultMode: 420
      name: env-overrides
      optional: true
    name: env-overrides
  - configMap:
      defaultMode: 420
      name: ovn-ca
    name: ovn-ca
  - name: ovn-cert
    secret:
      defaultMode: 420
      secretName: ovn-cert
  - name: ovn-node-metrics-cert
    secret:
      defaultMode: 420
      optional: true
      secretName: ovn-node-metrics-cert
  - name: kube-api-access-8btc8
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
      - configMap:
          items:
          - key: service-ca.crt
            path: service-ca.crt
          name: openshift-service-ca.crt
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2023-01-09T04:39:03Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2023-01-09T04:40:43Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2023-01-09T04:40:43Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2023-01-09T04:39:03Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: cri-o://694536fbf74b99695313fcc855c83b5018965c7d381e4fd4b22460efba43ad0c
    image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
    imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
    lastState: {}
    name: kube-rbac-proxy
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2023-01-09T04:39:18Z"
  - containerID: cri-o://80e40f3c90c7f638073c723a838df76e8eaff0d72487f8914bdd0cdc19948b85
    image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
    imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
    lastState: {}
    name: kube-rbac-proxy-ovn-metrics
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2023-01-09T04:39:18Z"
  - containerID: cri-o://3191252ceaa58251952dba7fb35038c9845f9f30e1b756034b543931ea8a5bca
    image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
    imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
    lastState: {}
    name: ovn-acl-logging
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2023-01-09T04:39:16Z"
  - containerID: cri-o://08ad4d74905f6bcefd1a736880d874fc0ed16cdfce53bc70f3206ad1423902c9
    image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
    imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
    lastState: {}
    name: ovn-controller
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2023-01-09T04:39:15Z"
  - containerID: cri-o://9abb183fd8cd63e8b97268b1715fb8bb50f70d0ddd129bdee4a2e79a98e04afd
    image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
    imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
    lastState: {}
    name: ovnkube-node
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2023-01-09T04:39:18Z"
  hostIP: 10.0.199.219
  phase: Running
  podIP: 10.0.199.219
  podIPs:
  - ip: 10.0.199.219
  qosClass: Burstable
  startTime: "2023-01-09T04:39:03Z"
