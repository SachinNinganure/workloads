---
apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      networkoperator.openshift.io/ip-family-mode: single-stack
    creationTimestamp: "2023-01-09T04:39:02Z"
    generateName: ovnkube-master-
    labels:
      app: ovnkube-master
      component: network
      controller-revision-hash: 6f76cc4b8c
      kubernetes.io/os: linux
      openshift.io/component: network
      ovn-db-pod: "true"
      pod-template-generation: "1"
      type: infra
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:networkoperator.openshift.io/ip-family-mode: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:controller-revision-hash: {}
            f:kubernetes.io/os: {}
            f:openshift.io/component: {}
            f:ovn-db-pod: {}
            f:pod-template-generation: {}
            f:type: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"4a6cb646-8c2d-40ce-8adb-81801692a940"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rbac-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9102,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"nbdb"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_NORTHD_PROBE_INTERVAL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:postStart:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9641,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9643,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"northd"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovn-dbchecker"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovnkube-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovnkube-master"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":29102,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/systemd/system"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovnkube-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"sbdb"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:postStart:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9642,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9644,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"env-overrides"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"etc-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"ovn-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"ovn-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"ovn-master-metrics-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"ovnkube-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"run-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"run-ovn"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"systemd-units"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-01-09T04:39:02Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.199.219"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-01-09T04:41:23Z"
    name: ovnkube-master-j6dlf
    namespace: openshift-ovn-kubernetes
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: ovnkube-master
      uid: 4a6cb646-8c2d-40ce-8adb-81801692a940
    resourceVersion: "6523"
    uid: 406aafb5-e303-4413-a14d-d792bd5c8aef
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-0-199-219.us-east-2.compute.internal
    containers:
    - command:
      - /bin/bash
      - -c
      - |
        set -xem
        if [[ -f /env/_master ]]; then
          set -o allexport
          source /env/_master
          set +o allexport
        fi

        quit() {
          echo "$(date -Iseconds) - stopping ovn-northd"
          OVN_MANAGE_OVSDB=no /usr/share/ovn/scripts/ovn-ctl stop_northd
          echo "$(date -Iseconds) - ovn-northd stopped"
          rm -f /var/run/ovn/ovn-northd.pid
          exit 0
        }
        # end of quit
        trap quit TERM INT

        echo "$(date -Iseconds) - starting ovn-northd"
        exec ovn-northd \
          --no-chdir "-vconsole:${OVN_LOG_LEVEL}" -vfile:off "-vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m" \
          --ovnnb-db "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --ovnsb-db "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --pidfile /var/run/ovn/ovn-northd.pid \
          --n-threads=4 \
          -p /ovn-cert/tls.key \
          -c /ovn-cert/tls.crt \
          -C /ovn-ca/ca-bundle.crt &

        wait $!
      env:
      - name: OVN_LOG_LEVEL
        value: info
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/bash
            - -c
            - OVN_MANAGE_OVSDB=no /usr/share/ovn/scripts/ovn-ctl stop_northd
      name: northd
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hqc98
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - "set -xem\nif [[ -f /env/_master ]]; then\n  set -o allexport\n  source /env/_master\n
        \ set +o allexport\nfi\n\nquit() {\n  echo \"$(date -Iseconds) - stopping
        nbdb\"\n  /usr/share/ovn/scripts/ovn-ctl stop_nb_ovsdb\n  echo \"$(date -Iseconds)
        - nbdb stopped\"\n  rm -f /var/run/ovn/ovnnb_db.pid\n  exit 0\n}\n# end of
        quit\ntrap quit TERM INT\n\nbracketify() { case \"$1\" in *:*) echo \"[$1]\"
        ;; *) echo \"$1\" ;; esac }\n# initialize variables\novn_kubernetes_namespace=openshift-ovn-kubernetes\novndb_ctl_ssl_opts=\"-p
        /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt\"\ntransport=\"ssl\"\novn_raft_conn_ip_url_suffix=\"\"\nif
        [[ \"${K8S_NODE_IP}\" == *\":\"* ]]; then\n  ovn_raft_conn_ip_url_suffix=\":[::]\"\nfi\ndb=\"nb\"\ndb_port=\"9641\"\novn_db_file=\"/etc/ovn/ovn${db}_db.db\"\n#
        checks if a db pod is part of a current cluster\ndb_part_of_cluster() {\n
        \ local pod=${1}\n  local db=${2}\n  local port=${3}\n  echo \"Checking if
        ${pod} is part of cluster\"\n  # TODO: change to use '--request-timeout=5s',
        if https://github.com/kubernetes/kubernetes/issues/49343 is fixed. \n  init_ip=$(timeout
        5 kubectl get pod -n ${ovn_kubernetes_namespace} ${pod} -o=jsonpath='{.status.podIP}')\n
        \ if [[ $? != 0 ]]; then\n    echo \"Unable to get ${pod} ip \"\n    return
        1\n  fi\n  echo \"Found ${pod} ip: $init_ip\"\n  init_ip=$(bracketify $init_ip)\n
        \ target=$(ovn-${db}ctl --timeout=5 --db=${transport}:${init_ip}:${port} ${ovndb_ctl_ssl_opts}
        \\\n            --data=bare --no-headings --columns=target list connection)\n
        \ if [[ \"${target}\" != \"p${transport}:${port}${ovn_raft_conn_ip_url_suffix}\"
        ]]; then\n    echo \"Unable to check correct target ${target} \"\n    return
        1\n  fi\n  echo \"${pod} is part of cluster\"\n  return 0\n}\n# end of db_part_of_cluster\n\n#
        Checks if cluster has already been initialized.\n# If not it returns false
        and sets init_ip to CLUSTER_INITIATOR_IP\ncluster_exists() {\n  local db=${1}\n
        \ local port=${2}\n  # TODO: change to use '--request-timeout=5s', if https://github.com/kubernetes/kubernetes/issues/49343
        is fixed. \n  db_pods=$(timeout 5 kubectl get pod -n ${ovn_kubernetes_namespace}
        -o=jsonpath='{.items[*].metadata.name}' | egrep -o 'ovnkube-master-\\w+' |
        grep -v \"metrics\")\n\n  for db_pod in $db_pods; do\n    if db_part_of_cluster
        $db_pod $db $port; then\n      echo \"${db_pod} is part of current cluster
        with ip: ${init_ip}!\"\n      return 0\n    fi\n  done\n  # if we get here
        \ there is no cluster, set init_ip and get out\n  init_ip=$(bracketify $CLUSTER_INITIATOR_IP)\n
        \ return 1\n}\n# end of cluster_exists()\n\n# RAFT clusters need an odd number
        of members to achieve consensus.\n# The CNO determines which members make
        up the cluster, so if this container\n# is not supposed to be part of the
        cluster, wait forever doing nothing\n# (instad of exiting and causing CrashLoopBackoffs
        for no reason).\nif [[ ! \"ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641\"
        =~ .*\":${K8S_NODE_IP}:\".* ]] && [[ ! \"ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641\"
        =~ .*\":[${K8S_NODE_IP}]:\".* ]]; then\n  echo \"$(date -Iseconds) - not selected
        as RAFT member; sleeping...\"\n  sleep 1500d\n  exit 0\nfi\n\nOVN_ARGS=\"--db-nb-cluster-local-port=9643
        \\\n  --db-nb-cluster-local-addr=$(bracketify ${K8S_NODE_IP}) \\\n  --no-monitor
        \\\n  --db-nb-cluster-local-proto=ssl \\\n  --ovn-nb-db-ssl-key=/ovn-cert/tls.key
        \\\n  --ovn-nb-db-ssl-cert=/ovn-cert/tls.crt \\\n  --ovn-nb-db-ssl-ca-cert=/ovn-ca/ca-bundle.crt\"\n\nCLUSTER_INITIATOR_IP=\"10.0.145.4\"\necho
        \"$(date -Iseconds) - starting nbdb  CLUSTER_INITIATOR_IP=${CLUSTER_INITIATOR_IP},
        K8S_NODE_IP=${K8S_NODE_IP}\"\ninitialize=\"false\"\n\nif [[ ! -e ${ovn_db_file}
        ]]; then\n  initialize=\"true\"\nfi\n\nif [[ \"${initialize}\" == \"true\"
        ]]; then\n  # check to see if a cluster already exists. If it does, just join
        it.\n  counter=0\n  cluster_found=false\n  while [ $counter -lt 5 ]; do\n
        \   if cluster_exists ${db} ${db_port}; then\n      cluster_found=true\n      break\n
        \   fi\n    sleep 1\n    counter=$((counter+1))\n  done\n\n  if ${cluster_found};
        then\n    echo \"Cluster already exists for DB: ${db}\"\n    # join existing
        cluster\n    exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n    --db-nb-cluster-remote-port=9643
        \\\n    --db-nb-cluster-remote-addr=${init_ip} \\\n    --db-nb-cluster-remote-proto=ssl
        \\\n    --ovn-nb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n    run_nb_ovsdb &\n\n    wait $!\n  else\n    # either we need to initialize
        a new cluster or wait for master to create it\n    if [[ \"${K8S_NODE_IP}\"
        == \"${CLUSTER_INITIATOR_IP}\" ]]; then\n      # set DB election timer at
        DB creation time if OVN supports it\n      election_timer=\n      if test
        -n \"$(/usr/share/ovn/scripts/ovn-ctl --help 2>&1 | grep \"\\--db-nb-election-timer\")\";
        then\n        election_timer=\"--db-nb-election-timer=$((10*1000))\"\n      fi\n\n
        \     exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n      --ovn-nb-log=\"-vconsole:${OVN_LOG_LEVEL}
        -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n      ${election_timer} \\\n      run_nb_ovsdb &\n\n      wait $!\n    else\n
        \     echo \"Joining the nbdb cluster with init_ip=${init_ip}...\"\n      exec
        /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n      --db-nb-cluster-remote-port=9643
        \\\n      --db-nb-cluster-remote-addr=${init_ip} \\\n      --db-nb-cluster-remote-proto=ssl
        \\\n      --ovn-nb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n      run_nb_ovsdb &\n\n      wait $!\n    fi\n  fi\nelse\n  exec /usr/share/ovn/scripts/ovn-ctl
        ${OVN_ARGS} \\\n    --ovn-nb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n    run_nb_ovsdb &\n\n    wait $!\nfi\n"
      env:
      - name: OVN_LOG_LEVEL
        value: info
      - name: OVN_NORTHD_PROBE_INTERVAL
        value: "10000"
      - name: K8S_NODE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        postStart:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              set -x
              CLUSTER_INITIATOR_IP="10.0.145.4"
              rm -f /var/run/ovn/ovnnb_db.pid

              # exit early if this DB is not supposed to be part of the cluster
              if [[ ! "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" =~ .*":${K8S_NODE_IP}:".* ]] && [[ ! "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" =~ .*":[${K8S_NODE_IP}]:".* ]]; then
                exit 0
              fi

              # retry an operation a number of times, sleeping 2 seconds between each try
              retry() {
                local tries=${1}
                local desc=${2}
                local cmd=${3}

                local retries=0
                while ! ${cmd}; do
                  (( retries += 1 ))
                  if [[ "${retries}" -gt ${tries} ]]; then
                    echo "$(date -Iseconds) - ERROR - nbdb ${desc} - too many failed attempts, giving up"
                    return 1
                  fi
                  echo "$(date -Iseconds) - WARN - nbdb ${desc} - failed try ${retries}, retrying..."
                  sleep 2
                done
                echo "$(date -Iseconds) - INFO - nbdb ${desc} - success"
                return 0
              }

              if [[ "${K8S_NODE_IP}" == "${CLUSTER_INITIATOR_IP}" ]]; then
                echo "$(date -Iseconds) - nbdb - postStart - waiting for master to be selected"

                # set the connection and inactivity probe
                if ! retry 60 "inactivity-probe" "ovn-nbctl --no-leader-only -t 5 set-connection pssl:9641 -- set connection . inactivity_probe=60000"; then
                  exit 1
                fi

                # Upgrade the db if required.
                DB_SCHEMA="/usr/share/ovn/ovn-nb.ovsschema"
                DB_SERVER="unix:/var/run/ovn/ovnnb_db.sock"
                schema_name=$(ovsdb-tool schema-name $DB_SCHEMA)
                db_version=$(ovsdb-client -t 10 get-schema-version "$DB_SERVER" "$schema_name")
                target_version=$(ovsdb-tool schema-version "$DB_SCHEMA")

                if ovsdb-tool compare-versions "$db_version" == "$target_version"; then
                  :
                elif ovsdb-tool compare-versions "$db_version" ">" "$target_version"; then
                    echo "Database $schema_name has newer schema version ($db_version) than our local schema ($target_version), possibly an upgrade is partially complete?"
                else
                    echo "Upgrading database $schema_name from schema version $db_version to $target_version"
                    ovsdb-client -t 30 convert "$DB_SERVER" "$DB_SCHEMA"
                fi
              fi

              # read the current northd_probe_interval from the DB
              OVN_NB_CTL="ovn-nbctl -p /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt --db "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641""
              northd_probe_interval=${OVN_NORTHD_PROBE_INTERVAL:-10000}
              echo "Setting northd probe interval to ${northd_probe_interval} ms"
              retries=0
              current_probe_interval=0
              while [[ "${retries}" -lt 20 ]]; do
                current_probe_interval=$(${OVN_NB_CTL} --if-exists get NB_GLOBAL . options:northd_probe_interval)
                if [[ $? == 0 ]]; then
                  current_probe_interval=$(echo ${current_probe_interval} | tr -d '\"')
                  break
                else
                  sleep 2
                  (( retries += 1 ))
                fi
              done

              # ensure the northd_probe_interval is set to the configured value
              if [[ "${current_probe_interval}" != "${northd_probe_interval}" ]]; then
                if ! retry 20 "northd-probe" "${OVN_NB_CTL} set NB_GLOBAL . options:northd_probe_interval=${northd_probe_interval}"; then
                  exit 1
                fi
              fi

              # Enable/disable IPsec

              ipsec=false

              if ! retry 20 "ipsec" "${OVN_NB_CTL} set nb_global . ipsec=${ipsec}"; then
                exit 1
              fi
        preStop:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              echo "$(date -Iseconds) - stopping nbdb"
              /usr/share/ovn/scripts/ovn-ctl stop_nb_ovsdb
              echo "$(date -Iseconds) - nbdb stopped"
              rm -f /var/run/ovn/ovnnb_db.pid
      name: nbdb
      ports:
      - containerPort: 9641
        hostPort: 9641
        name: nb-db-port
        protocol: TCP
      - containerPort: 9643
        hostPort: 9643
        name: nb-db-raft-port
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /bin/bash
          - -c
          - |
            set -xeo pipefail
            leader_status=$(/usr/bin/ovn-appctl -t /var/run/ovn/ovnnb_db.ctl --timeout=3 cluster/status OVN_Northbound  2>/dev/null | { grep "Leader: unknown" || true; })
            if [[ ! -z "${leader_status}" ]]; then
              echo "NB DB Raft leader is unknown to the cluster node."
              exit 1
            fi
            # set trim-on-compaction if this DB is supposed to be part of the cluster
            if [[ "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" =~ .*":${K8S_NODE_IP}:".* ]] || [[ "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" =~ .*":[${K8S_NODE_IP}]:".* ]]; then
              /usr/bin/ovn-appctl -t /var/run/ovn/ovnnb_db.ctl --timeout=5 ovsdb-server/memory-trim-on-compaction on 2>/dev/null
            fi
        failureThreshold: 3
        initialDelaySeconds: 90
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hqc98
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-master-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-master-metrics-cert not mounted. Waiting 20 minutes.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-master-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9102 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29102/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy
      ports:
      - containerPort: 9102
        hostPort: 9102
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-master-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hqc98
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - "set -xm\nif [[ -f /env/_master ]]; then\n  set -o allexport\n  source /env/_master\n
        \ set +o allexport\nfi\n\nquit() {\n  echo \"$(date -Iseconds) - stopping
        sbdb\"\n  /usr/share/ovn/scripts/ovn-ctl stop_sb_ovsdb\n  echo \"$(date -Iseconds)
        - sbdb stopped\"\n  rm -f /var/run/ovn/ovnsb_db.pid\n  exit 0\n}\n# end of
        quit\ntrap quit TERM INT\n\nbracketify() { case \"$1\" in *:*) echo \"[$1]\"
        ;; *) echo \"$1\" ;; esac }\n\n# initialize variables\novn_kubernetes_namespace=openshift-ovn-kubernetes\novndb_ctl_ssl_opts=\"-p
        /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt\"\ntransport=\"ssl\"\novn_raft_conn_ip_url_suffix=\"\"\nif
        [[ \"${K8S_NODE_IP}\" == *\":\"* ]]; then\n  ovn_raft_conn_ip_url_suffix=\":[::]\"\nfi\ndb=\"sb\"\ndb_port=\"9642\"\novn_db_file=\"/etc/ovn/ovn${db}_db.db\"\n#
        checks if a db pod is part of a current cluster\ndb_part_of_cluster() {\n
        \ local pod=${1}\n  local db=${2}\n  local port=${3}\n  echo \"Checking if
        ${pod} is part of cluster\"\n  # TODO: change to use '--request-timeout=5s',
        if https://github.com/kubernetes/kubernetes/issues/49343 is fixed. \n  init_ip=$(timeout
        5 kubectl get pod -n ${ovn_kubernetes_namespace} ${pod} -o=jsonpath='{.status.podIP}')\n
        \ if [[ $? != 0 ]]; then\n    echo \"Unable to get ${pod} ip \"\n    return
        1\n  fi\n  echo \"Found ${pod} ip: $init_ip\"\n  init_ip=$(bracketify $init_ip)\n
        \ target=$(ovn-${db}ctl --timeout=5 --db=${transport}:${init_ip}:${port} ${ovndb_ctl_ssl_opts}
        \\\n            --data=bare --no-headings --columns=target list connection)\n
        \ if [[ \"${target}\" != \"p${transport}:${port}${ovn_raft_conn_ip_url_suffix}\"
        ]]; then\n    echo \"Unable to check correct target ${target} \"\n    return
        1\n  fi\n  echo \"${pod} is part of cluster\"\n  return 0\n}\n# end of db_part_of_cluster\n\n#
        Checks if cluster has already been initialized.\n# If not it returns false
        and sets init_ip to CLUSTER_INITIATOR_IP\ncluster_exists() {\n  local db=${1}\n
        \ local port=${2}\n  # TODO: change to use '--request-timeout=5s', if https://github.com/kubernetes/kubernetes/issues/49343
        is fixed. \n  db_pods=$(timeout 5 kubectl get pod -n ${ovn_kubernetes_namespace}
        -o=jsonpath='{.items[*].metadata.name}' | egrep -o 'ovnkube-master-\\w+' |
        grep -v \"metrics\")\n\n  for db_pod in $db_pods; do\n    if db_part_of_cluster
        $db_pod $db $port; then\n      echo \"${db_pod} is part of current cluster
        with ip: ${init_ip}!\"\n      return 0\n    fi\n  done\n  # if we get here
        \ there is no cluster, set init_ip and get out\n  init_ip=$(bracketify $CLUSTER_INITIATOR_IP)\n
        \ return 1\n}\n# end of cluster_exists()\n\n# RAFT clusters need an odd number
        of members to achieve consensus.\n# The CNO determines which members make
        up the cluster, so if this container\n# is not supposed to be part of the
        cluster, wait forever doing nothing\n# (instad of exiting and causing CrashLoopBackoffs
        for no reason).\nif [[ ! \"ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642\"
        =~ .*\":${K8S_NODE_IP}:\".* ]] && [[ ! \"ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642\"
        =~ .*\":[${K8S_NODE_IP}]:\".* ]]; then\n  echo \"$(date -Iseconds) - not selected
        as RAFT member; sleeping...\"\n  sleep 1500d\n  exit 0\nfi\n\nOVN_ARGS=\"--db-sb-cluster-local-port=9644
        \\\n  --db-sb-cluster-local-addr=$(bracketify ${K8S_NODE_IP}) \\\n  --no-monitor
        \\\n  --db-sb-cluster-local-proto=ssl \\\n  --ovn-sb-db-ssl-key=/ovn-cert/tls.key
        \\\n  --ovn-sb-db-ssl-cert=/ovn-cert/tls.crt \\\n  --ovn-sb-db-ssl-ca-cert=/ovn-ca/ca-bundle.crt\"\n\nCLUSTER_INITIATOR_IP=\"10.0.145.4\"\necho
        \"$(date -Iseconds) - starting sbdb  CLUSTER_INITIATOR_IP=${CLUSTER_INITIATOR_IP}\"\ninitialize=\"false\"\n\nif
        [[ ! -e ${ovn_db_file} ]]; then\n  initialize=\"true\"\nfi\n\nif [[ \"${initialize}\"
        == \"true\" ]]; then\n  # check to see if a cluster already exists. If it
        does, just join it.\n  counter=0\n  cluster_found=false\n  while [ $counter
        -lt 5 ]; do\n    if cluster_exists ${db} ${db_port}; then\n      cluster_found=true\n
        \     break\n    fi\n    sleep 1\n    counter=$((counter+1))\n  done\n\n  if
        ${cluster_found}; then\n    echo \"Cluster already exists for DB: ${db}\"\n
        \   # join existing cluster\n    exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS}
        \\\n    --db-sb-cluster-remote-port=9644 \\\n    --db-sb-cluster-remote-addr=${init_ip}
        \\\n    --db-sb-cluster-remote-proto=ssl \\\n    --ovn-sb-log=\"-vconsole:${OVN_LOG_LEVEL}
        -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n    run_sb_ovsdb &\n\n    wait $!\n  else\n    # either we need to initialize
        a new cluster or wait for master to create it\n    if [[ \"${K8S_NODE_IP}\"
        == \"${CLUSTER_INITIATOR_IP}\" ]]; then\n      # set DB election timer at
        DB creation time if OVN supports it\n      election_timer=\n      if test
        -n \"$(/usr/share/ovn/scripts/ovn-ctl --help 2>&1 | grep \"\\--db-sb-election-timer\")\";
        then\n        election_timer=\"--db-sb-election-timer=$((16*1000))\"\n      fi\n\n
        \     exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n      --ovn-sb-log=\"-vconsole:${OVN_LOG_LEVEL}
        -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n      ${election_timer} \\\n      run_sb_ovsdb &\n\n      wait $!\n    else\n
        \     exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n      --db-sb-cluster-remote-port=9644
        \\\n      --db-sb-cluster-remote-addr=${init_ip} \\\n      --db-sb-cluster-remote-proto=ssl
        \\\n      --ovn-sb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n      run_sb_ovsdb &\n\n      wait $!\n    fi\n  fi\nelse\n  exec /usr/share/ovn/scripts/ovn-ctl
        ${OVN_ARGS} \\\n  --ovn-sb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n  run_sb_ovsdb &\n\n  wait $!\nfi\n"
      env:
      - name: OVN_LOG_LEVEL
        value: info
      - name: K8S_NODE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        postStart:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              set -x
              CLUSTER_INITIATOR_IP="10.0.145.4"
              rm -f /var/run/ovn/ovnsb_db.pid

              # exit early if this DB is not supposed to be part of the cluster
              if [[ ! "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" =~ .*":${K8S_NODE_IP}:".* ]] && [[ ! "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" =~ .*":[${K8S_NODE_IP}]:".* ]]; then
                exit 0
              fi

              # retry an operation a number of times, sleeping 2 seconds between each try
              retry() {
                local tries=${1}
                local desc=${2}
                local cmd=${3}

                local retries=0
                while ! ${cmd}; do
                  (( retries += 1 ))
                  if [[ "${retries}" -gt ${tries} ]]; then
                    echo "$(date -Iseconds) - ERROR - nbdb ${desc} - too many failed attempts, giving up"
                    return 1
                  fi
                  echo "$(date -Iseconds) - WARN - nbdb ${desc} - failed try ${retries}, retrying..."
                  sleep 2
                done
                echo "$(date -Iseconds) - INFO - nbdb ${desc} - success"
                return 0
              }

              if [[ "${K8S_NODE_IP}" == "${CLUSTER_INITIATOR_IP}" ]]; then
                echo "$(date -Iseconds) - sdb - postStart - waiting for master to be selected"

                # set the connection and inactivity probe
                if ! retry 60 "inactivity-probe" "ovn-sbctl --no-leader-only -t 5 set-connection pssl:9642 -- set connection . inactivity_probe=180000"; then
                  exit 1
                fi

                # Upgrade the db if required.
                DB_SCHEMA="/usr/share/ovn/ovn-sb.ovsschema"
                DB_SERVER="unix:/var/run/ovn/ovnsb_db.sock"
                schema_name=$(ovsdb-tool schema-name $DB_SCHEMA)
                db_version=$(ovsdb-client -t 10 get-schema-version "$DB_SERVER" "$schema_name")
                target_version=$(ovsdb-tool schema-version "$DB_SCHEMA")

                if ovsdb-tool compare-versions "$db_version" == "$target_version"; then
                  :
                elif ovsdb-tool compare-versions "$db_version" ">" "$target_version"; then
                    echo "Database $schema_name has newer schema version ($db_version) than our local schema ($target_version), possibly an upgrade is partially complete?"
                else
                    echo "Upgrading database $schema_name from schema version $db_version to $target_version"
                    ovsdb-client -t 30 convert "$DB_SERVER" "$DB_SCHEMA"
                fi
              fi

              # Kill some time while the cluster converges by checking IPsec status
              OVN_SB_CTL="ovn-sbctl -p /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt --db "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642""
              if ! retry 20 "ipsec" "${OVN_SB_CTL} get sb_global . ipsec"; then
                exit 1
              fi
        preStop:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              echo "$(date -Iseconds) - stopping sbdb"
              /usr/share/ovn/scripts/ovn-ctl stop_sb_ovsdb
              echo "$(date -Iseconds) - sbdb stopped"
              rm -f /var/run/ovn/ovnsb_db.pid
      name: sbdb
      ports:
      - containerPort: 9642
        hostPort: 9642
        name: sb-db-port
        protocol: TCP
      - containerPort: 9644
        hostPort: 9644
        name: sb-db-raft-port
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /bin/bash
          - -c
          - |
            set -xeo pipefail
            leader_status=$(/usr/bin/ovn-appctl -t /var/run/ovn/ovnsb_db.ctl --timeout=3 cluster/status OVN_Southbound  2>/dev/null | { grep "Leader: unknown" || true; })
            if [[ ! -z "${leader_status}" ]]; then
              echo "SB DB Raft leader is unknown to the cluster node."
              exit 1
            fi
            # set trim-on-compaction if this DB is supposed to be part of the cluster
            if [[ "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" =~ .*":${K8S_NODE_IP}:".* ]] || [[ "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" =~ .*":[${K8S_NODE_IP}]:".* ]]; then
              /usr/bin/ovn-appctl -t /var/run/ovn/ovnsb_db.ctl --timeout=5 ovsdb-server/memory-trim-on-compaction on 2>/dev/null
            fi
        failureThreshold: 3
        initialDelaySeconds: 90
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hqc98
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        set -xe
        if [[ -f "/env/_master" ]]; then
          set -o allexport
          source "/env/_master"
          set +o allexport
        fi

        if [ "shared" == "shared" ]; then
          gateway_mode_flags="--gateway-mode shared --gateway-interface br-ex"
        elif [ "shared" == "local" ]; then
          gateway_mode_flags="--gateway-mode local --gateway-interface br-ex"
        else
          echo "Invalid OVN_GATEWAY_MODE: \"shared\". Must be \"local\" or \"shared\"."
          exit 1
        fi

        echo "I$(date "+%m%d %H:%M:%S.%N") - ovnkube-master - start ovnkube --init-master ${K8S_NODE}"
        exec /usr/bin/ovnkube \
          --init-master "${K8S_NODE}" \
          --config-file=/run/ovnkube-config/ovnkube.conf \
          --ovn-empty-lb-events \
          --loglevel "${OVN_KUBE_LOG_LEVEL}" \
          --metrics-bind-address "127.0.0.1:29102" \
          --metrics-enable-pprof \
          --metrics-enable-config-duration \
          ${gateway_mode_flags} \
          --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --sb-client-privkey /ovn-cert/tls.key \
          --sb-client-cert /ovn-cert/tls.crt \
          --sb-client-cacert /ovn-ca/ca-bundle.crt \
          --sb-cert-common-name "ovn" \
          --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --nb-client-privkey /ovn-cert/tls.key \
          --nb-client-cert /ovn-cert/tls.crt \
          --nb-client-cacert /ovn-ca/ca-bundle.crt \
          --nb-cert-common-name "ovn" \
          --enable-multicast \
          --disable-snat-multiple-gws \
          --acl-logging-rate-limit "20"
      env:
      - name: OVN_KUBE_LOG_LEVEL
        value: "4"
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovnkube-master
      ports:
      - containerPort: 29102
        hostPort: 29102
        name: metrics-port
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/systemd/system
        name: systemd-units
        readOnly: true
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /run/ovnkube-config/
        name: ovnkube-config
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hqc98
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        set -xe
        if [[ -f "/env/_master" ]]; then
          set -o allexport
          source "/env/_master"
          set +o allexport
        fi

        echo "I$(date "+%m%d %H:%M:%S.%N") - ovn-dbchecker - start ovn-dbchecker"
        exec /usr/bin/ovndbchecker \
          --config-file=/run/ovnkube-config/ovnkube.conf \
          --loglevel "${OVN_KUBE_LOG_LEVEL}" \
          --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --sb-client-privkey /ovn-cert/tls.key \
          --sb-client-cert /ovn-cert/tls.crt \
          --sb-client-cacert /ovn-ca/ca-bundle.crt \
          --sb-cert-common-name "ovn" \
          --sb-raft-election-timer "16" \
          --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --nb-client-privkey /ovn-cert/tls.key \
          --nb-client-cert /ovn-cert/tls.crt \
          --nb-client-cacert /ovn-ca/ca-bundle.crt \
          --nb-cert-common-name "ovn" \
          --nb-raft-election-timer "10"
      env:
      - name: OVN_KUBE_LOG_LEVEL
        value: "4"
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-dbchecker
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /run/ovnkube-config/
        name: ovnkube-config
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hqc98
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-0-199-219.us-east-2.compute.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
      node-role.kubernetes.io/master: ""
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ovn-kubernetes-controller
    serviceAccountName: ovn-kubernetes-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists
    - key: node.kubernetes.io/not-ready
      operator: Exists
    - key: node.kubernetes.io/unreachable
      operator: Exists
    - key: node.kubernetes.io/network-unavailable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/systemd/system
        type: ""
      name: systemd-units
    - hostPath:
        path: /var/lib/ovn/etc
        type: ""
      name: etc-openvswitch
    - hostPath:
        path: /var/lib/ovn/data
        type: ""
      name: var-lib-openvswitch
    - hostPath:
        path: /var/run/openvswitch
        type: ""
      name: run-openvswitch
    - hostPath:
        path: /var/run/ovn
        type: ""
      name: run-ovn
    - configMap:
        defaultMode: 420
        name: ovnkube-config
      name: ovnkube-config
    - configMap:
        defaultMode: 420
        name: env-overrides
        optional: true
      name: env-overrides
    - configMap:
        defaultMode: 420
        name: ovn-ca
      name: ovn-ca
    - name: ovn-cert
      secret:
        defaultMode: 420
        secretName: ovn-cert
    - name: ovn-master-metrics-cert
      secret:
        defaultMode: 420
        optional: true
        secretName: ovn-master-metrics-cert
    - name: kube-api-access-hqc98
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:39:02Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:41:23Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:41:23Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:39:02Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://441dc894d8d8f2bed821c35bdb51bdeef015a28bcadedc9da4bfa85d22896179
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:50Z"
    - containerID: cri-o://7b8c943143dce69080ff090f2692961c78c3620d08f78bc3e0baac2934bffd61
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: nbdb
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:16Z"
    - containerID: cri-o://1d511ae3f36a660f0a23d7ba434fc338f609b7ca9163cc3d39d4e5d3aa298eb7
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: northd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:16Z"
    - containerID: cri-o://e50e780f27271c95167586fe2c3c3d7adcc07c4212b61a1f65a293369d7a5c50
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-dbchecker
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:40:23Z"
    - containerID: cri-o://7b2657fc8fdcccc7f128658f5977bc5ef9ee8acd64a548cba45f153c08a5e089
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovnkube-master
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:40:23Z"
    - containerID: cri-o://dd760a8d39d712681ec3c07cb30df4f11e04d7ea546a6ef043060eba1e7cefcb
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: sbdb
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:51Z"
    hostIP: 10.0.199.219
    phase: Running
    podIP: 10.0.199.219
    podIPs:
    - ip: 10.0.199.219
    qosClass: Burstable
    startTime: "2023-01-09T04:39:02Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      networkoperator.openshift.io/ip-family-mode: single-stack
    creationTimestamp: "2023-01-09T04:39:02Z"
    generateName: ovnkube-master-
    labels:
      app: ovnkube-master
      component: network
      controller-revision-hash: 6f76cc4b8c
      kubernetes.io/os: linux
      openshift.io/component: network
      ovn-db-pod: "true"
      pod-template-generation: "1"
      type: infra
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:networkoperator.openshift.io/ip-family-mode: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:controller-revision-hash: {}
            f:kubernetes.io/os: {}
            f:openshift.io/component: {}
            f:ovn-db-pod: {}
            f:pod-template-generation: {}
            f:type: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"4a6cb646-8c2d-40ce-8adb-81801692a940"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rbac-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9102,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"nbdb"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_NORTHD_PROBE_INTERVAL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:postStart:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9641,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9643,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"northd"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovn-dbchecker"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovnkube-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovnkube-master"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":29102,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/systemd/system"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovnkube-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"sbdb"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:postStart:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9642,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9644,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"env-overrides"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"etc-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"ovn-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"ovn-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"ovn-master-metrics-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"ovnkube-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"run-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"run-ovn"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"systemd-units"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-01-09T04:39:02Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.160.211"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-01-09T04:41:26Z"
    name: ovnkube-master-jrqkm
    namespace: openshift-ovn-kubernetes
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: ovnkube-master
      uid: 4a6cb646-8c2d-40ce-8adb-81801692a940
    resourceVersion: "6858"
    uid: 1eb3dff1-36fd-4f12-97b4-fe24e15e79c1
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-0-160-211.us-east-2.compute.internal
    containers:
    - command:
      - /bin/bash
      - -c
      - |
        set -xem
        if [[ -f /env/_master ]]; then
          set -o allexport
          source /env/_master
          set +o allexport
        fi

        quit() {
          echo "$(date -Iseconds) - stopping ovn-northd"
          OVN_MANAGE_OVSDB=no /usr/share/ovn/scripts/ovn-ctl stop_northd
          echo "$(date -Iseconds) - ovn-northd stopped"
          rm -f /var/run/ovn/ovn-northd.pid
          exit 0
        }
        # end of quit
        trap quit TERM INT

        echo "$(date -Iseconds) - starting ovn-northd"
        exec ovn-northd \
          --no-chdir "-vconsole:${OVN_LOG_LEVEL}" -vfile:off "-vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m" \
          --ovnnb-db "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --ovnsb-db "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --pidfile /var/run/ovn/ovn-northd.pid \
          --n-threads=4 \
          -p /ovn-cert/tls.key \
          -c /ovn-cert/tls.crt \
          -C /ovn-ca/ca-bundle.crt &

        wait $!
      env:
      - name: OVN_LOG_LEVEL
        value: info
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/bash
            - -c
            - OVN_MANAGE_OVSDB=no /usr/share/ovn/scripts/ovn-ctl stop_northd
      name: northd
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qgrnf
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - "set -xem\nif [[ -f /env/_master ]]; then\n  set -o allexport\n  source /env/_master\n
        \ set +o allexport\nfi\n\nquit() {\n  echo \"$(date -Iseconds) - stopping
        nbdb\"\n  /usr/share/ovn/scripts/ovn-ctl stop_nb_ovsdb\n  echo \"$(date -Iseconds)
        - nbdb stopped\"\n  rm -f /var/run/ovn/ovnnb_db.pid\n  exit 0\n}\n# end of
        quit\ntrap quit TERM INT\n\nbracketify() { case \"$1\" in *:*) echo \"[$1]\"
        ;; *) echo \"$1\" ;; esac }\n# initialize variables\novn_kubernetes_namespace=openshift-ovn-kubernetes\novndb_ctl_ssl_opts=\"-p
        /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt\"\ntransport=\"ssl\"\novn_raft_conn_ip_url_suffix=\"\"\nif
        [[ \"${K8S_NODE_IP}\" == *\":\"* ]]; then\n  ovn_raft_conn_ip_url_suffix=\":[::]\"\nfi\ndb=\"nb\"\ndb_port=\"9641\"\novn_db_file=\"/etc/ovn/ovn${db}_db.db\"\n#
        checks if a db pod is part of a current cluster\ndb_part_of_cluster() {\n
        \ local pod=${1}\n  local db=${2}\n  local port=${3}\n  echo \"Checking if
        ${pod} is part of cluster\"\n  # TODO: change to use '--request-timeout=5s',
        if https://github.com/kubernetes/kubernetes/issues/49343 is fixed. \n  init_ip=$(timeout
        5 kubectl get pod -n ${ovn_kubernetes_namespace} ${pod} -o=jsonpath='{.status.podIP}')\n
        \ if [[ $? != 0 ]]; then\n    echo \"Unable to get ${pod} ip \"\n    return
        1\n  fi\n  echo \"Found ${pod} ip: $init_ip\"\n  init_ip=$(bracketify $init_ip)\n
        \ target=$(ovn-${db}ctl --timeout=5 --db=${transport}:${init_ip}:${port} ${ovndb_ctl_ssl_opts}
        \\\n            --data=bare --no-headings --columns=target list connection)\n
        \ if [[ \"${target}\" != \"p${transport}:${port}${ovn_raft_conn_ip_url_suffix}\"
        ]]; then\n    echo \"Unable to check correct target ${target} \"\n    return
        1\n  fi\n  echo \"${pod} is part of cluster\"\n  return 0\n}\n# end of db_part_of_cluster\n\n#
        Checks if cluster has already been initialized.\n# If not it returns false
        and sets init_ip to CLUSTER_INITIATOR_IP\ncluster_exists() {\n  local db=${1}\n
        \ local port=${2}\n  # TODO: change to use '--request-timeout=5s', if https://github.com/kubernetes/kubernetes/issues/49343
        is fixed. \n  db_pods=$(timeout 5 kubectl get pod -n ${ovn_kubernetes_namespace}
        -o=jsonpath='{.items[*].metadata.name}' | egrep -o 'ovnkube-master-\\w+' |
        grep -v \"metrics\")\n\n  for db_pod in $db_pods; do\n    if db_part_of_cluster
        $db_pod $db $port; then\n      echo \"${db_pod} is part of current cluster
        with ip: ${init_ip}!\"\n      return 0\n    fi\n  done\n  # if we get here
        \ there is no cluster, set init_ip and get out\n  init_ip=$(bracketify $CLUSTER_INITIATOR_IP)\n
        \ return 1\n}\n# end of cluster_exists()\n\n# RAFT clusters need an odd number
        of members to achieve consensus.\n# The CNO determines which members make
        up the cluster, so if this container\n# is not supposed to be part of the
        cluster, wait forever doing nothing\n# (instad of exiting and causing CrashLoopBackoffs
        for no reason).\nif [[ ! \"ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641\"
        =~ .*\":${K8S_NODE_IP}:\".* ]] && [[ ! \"ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641\"
        =~ .*\":[${K8S_NODE_IP}]:\".* ]]; then\n  echo \"$(date -Iseconds) - not selected
        as RAFT member; sleeping...\"\n  sleep 1500d\n  exit 0\nfi\n\nOVN_ARGS=\"--db-nb-cluster-local-port=9643
        \\\n  --db-nb-cluster-local-addr=$(bracketify ${K8S_NODE_IP}) \\\n  --no-monitor
        \\\n  --db-nb-cluster-local-proto=ssl \\\n  --ovn-nb-db-ssl-key=/ovn-cert/tls.key
        \\\n  --ovn-nb-db-ssl-cert=/ovn-cert/tls.crt \\\n  --ovn-nb-db-ssl-ca-cert=/ovn-ca/ca-bundle.crt\"\n\nCLUSTER_INITIATOR_IP=\"10.0.145.4\"\necho
        \"$(date -Iseconds) - starting nbdb  CLUSTER_INITIATOR_IP=${CLUSTER_INITIATOR_IP},
        K8S_NODE_IP=${K8S_NODE_IP}\"\ninitialize=\"false\"\n\nif [[ ! -e ${ovn_db_file}
        ]]; then\n  initialize=\"true\"\nfi\n\nif [[ \"${initialize}\" == \"true\"
        ]]; then\n  # check to see if a cluster already exists. If it does, just join
        it.\n  counter=0\n  cluster_found=false\n  while [ $counter -lt 5 ]; do\n
        \   if cluster_exists ${db} ${db_port}; then\n      cluster_found=true\n      break\n
        \   fi\n    sleep 1\n    counter=$((counter+1))\n  done\n\n  if ${cluster_found};
        then\n    echo \"Cluster already exists for DB: ${db}\"\n    # join existing
        cluster\n    exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n    --db-nb-cluster-remote-port=9643
        \\\n    --db-nb-cluster-remote-addr=${init_ip} \\\n    --db-nb-cluster-remote-proto=ssl
        \\\n    --ovn-nb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n    run_nb_ovsdb &\n\n    wait $!\n  else\n    # either we need to initialize
        a new cluster or wait for master to create it\n    if [[ \"${K8S_NODE_IP}\"
        == \"${CLUSTER_INITIATOR_IP}\" ]]; then\n      # set DB election timer at
        DB creation time if OVN supports it\n      election_timer=\n      if test
        -n \"$(/usr/share/ovn/scripts/ovn-ctl --help 2>&1 | grep \"\\--db-nb-election-timer\")\";
        then\n        election_timer=\"--db-nb-election-timer=$((10*1000))\"\n      fi\n\n
        \     exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n      --ovn-nb-log=\"-vconsole:${OVN_LOG_LEVEL}
        -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n      ${election_timer} \\\n      run_nb_ovsdb &\n\n      wait $!\n    else\n
        \     echo \"Joining the nbdb cluster with init_ip=${init_ip}...\"\n      exec
        /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n      --db-nb-cluster-remote-port=9643
        \\\n      --db-nb-cluster-remote-addr=${init_ip} \\\n      --db-nb-cluster-remote-proto=ssl
        \\\n      --ovn-nb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n      run_nb_ovsdb &\n\n      wait $!\n    fi\n  fi\nelse\n  exec /usr/share/ovn/scripts/ovn-ctl
        ${OVN_ARGS} \\\n    --ovn-nb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n    run_nb_ovsdb &\n\n    wait $!\nfi\n"
      env:
      - name: OVN_LOG_LEVEL
        value: info
      - name: OVN_NORTHD_PROBE_INTERVAL
        value: "10000"
      - name: K8S_NODE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        postStart:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              set -x
              CLUSTER_INITIATOR_IP="10.0.145.4"
              rm -f /var/run/ovn/ovnnb_db.pid

              # exit early if this DB is not supposed to be part of the cluster
              if [[ ! "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" =~ .*":${K8S_NODE_IP}:".* ]] && [[ ! "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" =~ .*":[${K8S_NODE_IP}]:".* ]]; then
                exit 0
              fi

              # retry an operation a number of times, sleeping 2 seconds between each try
              retry() {
                local tries=${1}
                local desc=${2}
                local cmd=${3}

                local retries=0
                while ! ${cmd}; do
                  (( retries += 1 ))
                  if [[ "${retries}" -gt ${tries} ]]; then
                    echo "$(date -Iseconds) - ERROR - nbdb ${desc} - too many failed attempts, giving up"
                    return 1
                  fi
                  echo "$(date -Iseconds) - WARN - nbdb ${desc} - failed try ${retries}, retrying..."
                  sleep 2
                done
                echo "$(date -Iseconds) - INFO - nbdb ${desc} - success"
                return 0
              }

              if [[ "${K8S_NODE_IP}" == "${CLUSTER_INITIATOR_IP}" ]]; then
                echo "$(date -Iseconds) - nbdb - postStart - waiting for master to be selected"

                # set the connection and inactivity probe
                if ! retry 60 "inactivity-probe" "ovn-nbctl --no-leader-only -t 5 set-connection pssl:9641 -- set connection . inactivity_probe=60000"; then
                  exit 1
                fi

                # Upgrade the db if required.
                DB_SCHEMA="/usr/share/ovn/ovn-nb.ovsschema"
                DB_SERVER="unix:/var/run/ovn/ovnnb_db.sock"
                schema_name=$(ovsdb-tool schema-name $DB_SCHEMA)
                db_version=$(ovsdb-client -t 10 get-schema-version "$DB_SERVER" "$schema_name")
                target_version=$(ovsdb-tool schema-version "$DB_SCHEMA")

                if ovsdb-tool compare-versions "$db_version" == "$target_version"; then
                  :
                elif ovsdb-tool compare-versions "$db_version" ">" "$target_version"; then
                    echo "Database $schema_name has newer schema version ($db_version) than our local schema ($target_version), possibly an upgrade is partially complete?"
                else
                    echo "Upgrading database $schema_name from schema version $db_version to $target_version"
                    ovsdb-client -t 30 convert "$DB_SERVER" "$DB_SCHEMA"
                fi
              fi

              # read the current northd_probe_interval from the DB
              OVN_NB_CTL="ovn-nbctl -p /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt --db "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641""
              northd_probe_interval=${OVN_NORTHD_PROBE_INTERVAL:-10000}
              echo "Setting northd probe interval to ${northd_probe_interval} ms"
              retries=0
              current_probe_interval=0
              while [[ "${retries}" -lt 20 ]]; do
                current_probe_interval=$(${OVN_NB_CTL} --if-exists get NB_GLOBAL . options:northd_probe_interval)
                if [[ $? == 0 ]]; then
                  current_probe_interval=$(echo ${current_probe_interval} | tr -d '\"')
                  break
                else
                  sleep 2
                  (( retries += 1 ))
                fi
              done

              # ensure the northd_probe_interval is set to the configured value
              if [[ "${current_probe_interval}" != "${northd_probe_interval}" ]]; then
                if ! retry 20 "northd-probe" "${OVN_NB_CTL} set NB_GLOBAL . options:northd_probe_interval=${northd_probe_interval}"; then
                  exit 1
                fi
              fi

              # Enable/disable IPsec

              ipsec=false

              if ! retry 20 "ipsec" "${OVN_NB_CTL} set nb_global . ipsec=${ipsec}"; then
                exit 1
              fi
        preStop:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              echo "$(date -Iseconds) - stopping nbdb"
              /usr/share/ovn/scripts/ovn-ctl stop_nb_ovsdb
              echo "$(date -Iseconds) - nbdb stopped"
              rm -f /var/run/ovn/ovnnb_db.pid
      name: nbdb
      ports:
      - containerPort: 9641
        hostPort: 9641
        name: nb-db-port
        protocol: TCP
      - containerPort: 9643
        hostPort: 9643
        name: nb-db-raft-port
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /bin/bash
          - -c
          - |
            set -xeo pipefail
            leader_status=$(/usr/bin/ovn-appctl -t /var/run/ovn/ovnnb_db.ctl --timeout=3 cluster/status OVN_Northbound  2>/dev/null | { grep "Leader: unknown" || true; })
            if [[ ! -z "${leader_status}" ]]; then
              echo "NB DB Raft leader is unknown to the cluster node."
              exit 1
            fi
            # set trim-on-compaction if this DB is supposed to be part of the cluster
            if [[ "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" =~ .*":${K8S_NODE_IP}:".* ]] || [[ "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" =~ .*":[${K8S_NODE_IP}]:".* ]]; then
              /usr/bin/ovn-appctl -t /var/run/ovn/ovnnb_db.ctl --timeout=5 ovsdb-server/memory-trim-on-compaction on 2>/dev/null
            fi
        failureThreshold: 3
        initialDelaySeconds: 90
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qgrnf
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-master-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-master-metrics-cert not mounted. Waiting 20 minutes.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-master-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9102 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29102/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy
      ports:
      - containerPort: 9102
        hostPort: 9102
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-master-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qgrnf
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - "set -xm\nif [[ -f /env/_master ]]; then\n  set -o allexport\n  source /env/_master\n
        \ set +o allexport\nfi\n\nquit() {\n  echo \"$(date -Iseconds) - stopping
        sbdb\"\n  /usr/share/ovn/scripts/ovn-ctl stop_sb_ovsdb\n  echo \"$(date -Iseconds)
        - sbdb stopped\"\n  rm -f /var/run/ovn/ovnsb_db.pid\n  exit 0\n}\n# end of
        quit\ntrap quit TERM INT\n\nbracketify() { case \"$1\" in *:*) echo \"[$1]\"
        ;; *) echo \"$1\" ;; esac }\n\n# initialize variables\novn_kubernetes_namespace=openshift-ovn-kubernetes\novndb_ctl_ssl_opts=\"-p
        /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt\"\ntransport=\"ssl\"\novn_raft_conn_ip_url_suffix=\"\"\nif
        [[ \"${K8S_NODE_IP}\" == *\":\"* ]]; then\n  ovn_raft_conn_ip_url_suffix=\":[::]\"\nfi\ndb=\"sb\"\ndb_port=\"9642\"\novn_db_file=\"/etc/ovn/ovn${db}_db.db\"\n#
        checks if a db pod is part of a current cluster\ndb_part_of_cluster() {\n
        \ local pod=${1}\n  local db=${2}\n  local port=${3}\n  echo \"Checking if
        ${pod} is part of cluster\"\n  # TODO: change to use '--request-timeout=5s',
        if https://github.com/kubernetes/kubernetes/issues/49343 is fixed. \n  init_ip=$(timeout
        5 kubectl get pod -n ${ovn_kubernetes_namespace} ${pod} -o=jsonpath='{.status.podIP}')\n
        \ if [[ $? != 0 ]]; then\n    echo \"Unable to get ${pod} ip \"\n    return
        1\n  fi\n  echo \"Found ${pod} ip: $init_ip\"\n  init_ip=$(bracketify $init_ip)\n
        \ target=$(ovn-${db}ctl --timeout=5 --db=${transport}:${init_ip}:${port} ${ovndb_ctl_ssl_opts}
        \\\n            --data=bare --no-headings --columns=target list connection)\n
        \ if [[ \"${target}\" != \"p${transport}:${port}${ovn_raft_conn_ip_url_suffix}\"
        ]]; then\n    echo \"Unable to check correct target ${target} \"\n    return
        1\n  fi\n  echo \"${pod} is part of cluster\"\n  return 0\n}\n# end of db_part_of_cluster\n\n#
        Checks if cluster has already been initialized.\n# If not it returns false
        and sets init_ip to CLUSTER_INITIATOR_IP\ncluster_exists() {\n  local db=${1}\n
        \ local port=${2}\n  # TODO: change to use '--request-timeout=5s', if https://github.com/kubernetes/kubernetes/issues/49343
        is fixed. \n  db_pods=$(timeout 5 kubectl get pod -n ${ovn_kubernetes_namespace}
        -o=jsonpath='{.items[*].metadata.name}' | egrep -o 'ovnkube-master-\\w+' |
        grep -v \"metrics\")\n\n  for db_pod in $db_pods; do\n    if db_part_of_cluster
        $db_pod $db $port; then\n      echo \"${db_pod} is part of current cluster
        with ip: ${init_ip}!\"\n      return 0\n    fi\n  done\n  # if we get here
        \ there is no cluster, set init_ip and get out\n  init_ip=$(bracketify $CLUSTER_INITIATOR_IP)\n
        \ return 1\n}\n# end of cluster_exists()\n\n# RAFT clusters need an odd number
        of members to achieve consensus.\n# The CNO determines which members make
        up the cluster, so if this container\n# is not supposed to be part of the
        cluster, wait forever doing nothing\n# (instad of exiting and causing CrashLoopBackoffs
        for no reason).\nif [[ ! \"ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642\"
        =~ .*\":${K8S_NODE_IP}:\".* ]] && [[ ! \"ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642\"
        =~ .*\":[${K8S_NODE_IP}]:\".* ]]; then\n  echo \"$(date -Iseconds) - not selected
        as RAFT member; sleeping...\"\n  sleep 1500d\n  exit 0\nfi\n\nOVN_ARGS=\"--db-sb-cluster-local-port=9644
        \\\n  --db-sb-cluster-local-addr=$(bracketify ${K8S_NODE_IP}) \\\n  --no-monitor
        \\\n  --db-sb-cluster-local-proto=ssl \\\n  --ovn-sb-db-ssl-key=/ovn-cert/tls.key
        \\\n  --ovn-sb-db-ssl-cert=/ovn-cert/tls.crt \\\n  --ovn-sb-db-ssl-ca-cert=/ovn-ca/ca-bundle.crt\"\n\nCLUSTER_INITIATOR_IP=\"10.0.145.4\"\necho
        \"$(date -Iseconds) - starting sbdb  CLUSTER_INITIATOR_IP=${CLUSTER_INITIATOR_IP}\"\ninitialize=\"false\"\n\nif
        [[ ! -e ${ovn_db_file} ]]; then\n  initialize=\"true\"\nfi\n\nif [[ \"${initialize}\"
        == \"true\" ]]; then\n  # check to see if a cluster already exists. If it
        does, just join it.\n  counter=0\n  cluster_found=false\n  while [ $counter
        -lt 5 ]; do\n    if cluster_exists ${db} ${db_port}; then\n      cluster_found=true\n
        \     break\n    fi\n    sleep 1\n    counter=$((counter+1))\n  done\n\n  if
        ${cluster_found}; then\n    echo \"Cluster already exists for DB: ${db}\"\n
        \   # join existing cluster\n    exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS}
        \\\n    --db-sb-cluster-remote-port=9644 \\\n    --db-sb-cluster-remote-addr=${init_ip}
        \\\n    --db-sb-cluster-remote-proto=ssl \\\n    --ovn-sb-log=\"-vconsole:${OVN_LOG_LEVEL}
        -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n    run_sb_ovsdb &\n\n    wait $!\n  else\n    # either we need to initialize
        a new cluster or wait for master to create it\n    if [[ \"${K8S_NODE_IP}\"
        == \"${CLUSTER_INITIATOR_IP}\" ]]; then\n      # set DB election timer at
        DB creation time if OVN supports it\n      election_timer=\n      if test
        -n \"$(/usr/share/ovn/scripts/ovn-ctl --help 2>&1 | grep \"\\--db-sb-election-timer\")\";
        then\n        election_timer=\"--db-sb-election-timer=$((16*1000))\"\n      fi\n\n
        \     exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n      --ovn-sb-log=\"-vconsole:${OVN_LOG_LEVEL}
        -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n      ${election_timer} \\\n      run_sb_ovsdb &\n\n      wait $!\n    else\n
        \     exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n      --db-sb-cluster-remote-port=9644
        \\\n      --db-sb-cluster-remote-addr=${init_ip} \\\n      --db-sb-cluster-remote-proto=ssl
        \\\n      --ovn-sb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n      run_sb_ovsdb &\n\n      wait $!\n    fi\n  fi\nelse\n  exec /usr/share/ovn/scripts/ovn-ctl
        ${OVN_ARGS} \\\n  --ovn-sb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n  run_sb_ovsdb &\n\n  wait $!\nfi\n"
      env:
      - name: OVN_LOG_LEVEL
        value: info
      - name: K8S_NODE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        postStart:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              set -x
              CLUSTER_INITIATOR_IP="10.0.145.4"
              rm -f /var/run/ovn/ovnsb_db.pid

              # exit early if this DB is not supposed to be part of the cluster
              if [[ ! "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" =~ .*":${K8S_NODE_IP}:".* ]] && [[ ! "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" =~ .*":[${K8S_NODE_IP}]:".* ]]; then
                exit 0
              fi

              # retry an operation a number of times, sleeping 2 seconds between each try
              retry() {
                local tries=${1}
                local desc=${2}
                local cmd=${3}

                local retries=0
                while ! ${cmd}; do
                  (( retries += 1 ))
                  if [[ "${retries}" -gt ${tries} ]]; then
                    echo "$(date -Iseconds) - ERROR - nbdb ${desc} - too many failed attempts, giving up"
                    return 1
                  fi
                  echo "$(date -Iseconds) - WARN - nbdb ${desc} - failed try ${retries}, retrying..."
                  sleep 2
                done
                echo "$(date -Iseconds) - INFO - nbdb ${desc} - success"
                return 0
              }

              if [[ "${K8S_NODE_IP}" == "${CLUSTER_INITIATOR_IP}" ]]; then
                echo "$(date -Iseconds) - sdb - postStart - waiting for master to be selected"

                # set the connection and inactivity probe
                if ! retry 60 "inactivity-probe" "ovn-sbctl --no-leader-only -t 5 set-connection pssl:9642 -- set connection . inactivity_probe=180000"; then
                  exit 1
                fi

                # Upgrade the db if required.
                DB_SCHEMA="/usr/share/ovn/ovn-sb.ovsschema"
                DB_SERVER="unix:/var/run/ovn/ovnsb_db.sock"
                schema_name=$(ovsdb-tool schema-name $DB_SCHEMA)
                db_version=$(ovsdb-client -t 10 get-schema-version "$DB_SERVER" "$schema_name")
                target_version=$(ovsdb-tool schema-version "$DB_SCHEMA")

                if ovsdb-tool compare-versions "$db_version" == "$target_version"; then
                  :
                elif ovsdb-tool compare-versions "$db_version" ">" "$target_version"; then
                    echo "Database $schema_name has newer schema version ($db_version) than our local schema ($target_version), possibly an upgrade is partially complete?"
                else
                    echo "Upgrading database $schema_name from schema version $db_version to $target_version"
                    ovsdb-client -t 30 convert "$DB_SERVER" "$DB_SCHEMA"
                fi
              fi

              # Kill some time while the cluster converges by checking IPsec status
              OVN_SB_CTL="ovn-sbctl -p /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt --db "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642""
              if ! retry 20 "ipsec" "${OVN_SB_CTL} get sb_global . ipsec"; then
                exit 1
              fi
        preStop:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              echo "$(date -Iseconds) - stopping sbdb"
              /usr/share/ovn/scripts/ovn-ctl stop_sb_ovsdb
              echo "$(date -Iseconds) - sbdb stopped"
              rm -f /var/run/ovn/ovnsb_db.pid
      name: sbdb
      ports:
      - containerPort: 9642
        hostPort: 9642
        name: sb-db-port
        protocol: TCP
      - containerPort: 9644
        hostPort: 9644
        name: sb-db-raft-port
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /bin/bash
          - -c
          - |
            set -xeo pipefail
            leader_status=$(/usr/bin/ovn-appctl -t /var/run/ovn/ovnsb_db.ctl --timeout=3 cluster/status OVN_Southbound  2>/dev/null | { grep "Leader: unknown" || true; })
            if [[ ! -z "${leader_status}" ]]; then
              echo "SB DB Raft leader is unknown to the cluster node."
              exit 1
            fi
            # set trim-on-compaction if this DB is supposed to be part of the cluster
            if [[ "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" =~ .*":${K8S_NODE_IP}:".* ]] || [[ "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" =~ .*":[${K8S_NODE_IP}]:".* ]]; then
              /usr/bin/ovn-appctl -t /var/run/ovn/ovnsb_db.ctl --timeout=5 ovsdb-server/memory-trim-on-compaction on 2>/dev/null
            fi
        failureThreshold: 3
        initialDelaySeconds: 90
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qgrnf
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        set -xe
        if [[ -f "/env/_master" ]]; then
          set -o allexport
          source "/env/_master"
          set +o allexport
        fi

        if [ "shared" == "shared" ]; then
          gateway_mode_flags="--gateway-mode shared --gateway-interface br-ex"
        elif [ "shared" == "local" ]; then
          gateway_mode_flags="--gateway-mode local --gateway-interface br-ex"
        else
          echo "Invalid OVN_GATEWAY_MODE: \"shared\". Must be \"local\" or \"shared\"."
          exit 1
        fi

        echo "I$(date "+%m%d %H:%M:%S.%N") - ovnkube-master - start ovnkube --init-master ${K8S_NODE}"
        exec /usr/bin/ovnkube \
          --init-master "${K8S_NODE}" \
          --config-file=/run/ovnkube-config/ovnkube.conf \
          --ovn-empty-lb-events \
          --loglevel "${OVN_KUBE_LOG_LEVEL}" \
          --metrics-bind-address "127.0.0.1:29102" \
          --metrics-enable-pprof \
          --metrics-enable-config-duration \
          ${gateway_mode_flags} \
          --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --sb-client-privkey /ovn-cert/tls.key \
          --sb-client-cert /ovn-cert/tls.crt \
          --sb-client-cacert /ovn-ca/ca-bundle.crt \
          --sb-cert-common-name "ovn" \
          --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --nb-client-privkey /ovn-cert/tls.key \
          --nb-client-cert /ovn-cert/tls.crt \
          --nb-client-cacert /ovn-ca/ca-bundle.crt \
          --nb-cert-common-name "ovn" \
          --enable-multicast \
          --disable-snat-multiple-gws \
          --acl-logging-rate-limit "20"
      env:
      - name: OVN_KUBE_LOG_LEVEL
        value: "4"
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovnkube-master
      ports:
      - containerPort: 29102
        hostPort: 29102
        name: metrics-port
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/systemd/system
        name: systemd-units
        readOnly: true
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /run/ovnkube-config/
        name: ovnkube-config
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qgrnf
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        set -xe
        if [[ -f "/env/_master" ]]; then
          set -o allexport
          source "/env/_master"
          set +o allexport
        fi

        echo "I$(date "+%m%d %H:%M:%S.%N") - ovn-dbchecker - start ovn-dbchecker"
        exec /usr/bin/ovndbchecker \
          --config-file=/run/ovnkube-config/ovnkube.conf \
          --loglevel "${OVN_KUBE_LOG_LEVEL}" \
          --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --sb-client-privkey /ovn-cert/tls.key \
          --sb-client-cert /ovn-cert/tls.crt \
          --sb-client-cacert /ovn-ca/ca-bundle.crt \
          --sb-cert-common-name "ovn" \
          --sb-raft-election-timer "16" \
          --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --nb-client-privkey /ovn-cert/tls.key \
          --nb-client-cert /ovn-cert/tls.crt \
          --nb-client-cacert /ovn-ca/ca-bundle.crt \
          --nb-cert-common-name "ovn" \
          --nb-raft-election-timer "10"
      env:
      - name: OVN_KUBE_LOG_LEVEL
        value: "4"
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-dbchecker
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /run/ovnkube-config/
        name: ovnkube-config
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qgrnf
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-0-160-211.us-east-2.compute.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
      node-role.kubernetes.io/master: ""
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ovn-kubernetes-controller
    serviceAccountName: ovn-kubernetes-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists
    - key: node.kubernetes.io/not-ready
      operator: Exists
    - key: node.kubernetes.io/unreachable
      operator: Exists
    - key: node.kubernetes.io/network-unavailable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/systemd/system
        type: ""
      name: systemd-units
    - hostPath:
        path: /var/lib/ovn/etc
        type: ""
      name: etc-openvswitch
    - hostPath:
        path: /var/lib/ovn/data
        type: ""
      name: var-lib-openvswitch
    - hostPath:
        path: /var/run/openvswitch
        type: ""
      name: run-openvswitch
    - hostPath:
        path: /var/run/ovn
        type: ""
      name: run-ovn
    - configMap:
        defaultMode: 420
        name: ovnkube-config
      name: ovnkube-config
    - configMap:
        defaultMode: 420
        name: env-overrides
        optional: true
      name: env-overrides
    - configMap:
        defaultMode: 420
        name: ovn-ca
      name: ovn-ca
    - name: ovn-cert
      secret:
        defaultMode: 420
        secretName: ovn-cert
    - name: ovn-master-metrics-cert
      secret:
        defaultMode: 420
        optional: true
        secretName: ovn-master-metrics-cert
    - name: kube-api-access-qgrnf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:39:06Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:41:26Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:41:26Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:39:02Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://96ed1cac5c8e1264b64d507af41cd529ea7add7440eadb6c968440e6f790f866
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:50Z"
    - containerID: cri-o://200d0a8ca516487100ded44e28a60ca376c444daeae275f32b47123b4aa8b147
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: nbdb
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:22Z"
    - containerID: cri-o://fd3333f14296b525fe1faedfe02072bedd75744de62e399263b9748a14d80d7c
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: northd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:21Z"
    - containerID: cri-o://bff10b03ac8ff2bb53fcc49e9984ade3224d0fcf5fa10fd92086dec3f3362344
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-dbchecker
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:40:23Z"
    - containerID: cri-o://c5c15839307d305d6d3a77027607e5b6007d73ea00f126170e32753f427789b3
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovnkube-master
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:40:23Z"
    - containerID: cri-o://f65b000d3ef56615efefa1c7aed6356fe6df9e2e5ed20de9efc2f77ba7694162
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: sbdb
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:50Z"
    hostIP: 10.0.160.211
    phase: Running
    podIP: 10.0.160.211
    podIPs:
    - ip: 10.0.160.211
    qosClass: Burstable
    startTime: "2023-01-09T04:39:06Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      networkoperator.openshift.io/ip-family-mode: single-stack
    creationTimestamp: "2023-01-09T04:39:02Z"
    generateName: ovnkube-master-
    labels:
      app: ovnkube-master
      component: network
      controller-revision-hash: 6f76cc4b8c
      kubernetes.io/os: linux
      openshift.io/component: network
      ovn-db-pod: "true"
      pod-template-generation: "1"
      type: infra
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:networkoperator.openshift.io/ip-family-mode: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:controller-revision-hash: {}
            f:kubernetes.io/os: {}
            f:openshift.io/component: {}
            f:ovn-db-pod: {}
            f:pod-template-generation: {}
            f:type: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"4a6cb646-8c2d-40ce-8adb-81801692a940"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rbac-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9102,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"nbdb"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_NORTHD_PROBE_INTERVAL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:postStart:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9641,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9643,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"northd"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovn-dbchecker"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovnkube-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovnkube-master"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":29102,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/systemd/system"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovnkube-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"sbdb"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:postStart:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9642,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9644,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"env-overrides"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"etc-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"ovn-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"ovn-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"ovn-master-metrics-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"ovnkube-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"run-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"run-ovn"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"systemd-units"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-01-09T04:39:02Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.145.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-01-09T04:41:23Z"
    name: ovnkube-master-rldgf
    namespace: openshift-ovn-kubernetes
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: ovnkube-master
      uid: 4a6cb646-8c2d-40ce-8adb-81801692a940
    resourceVersion: "6531"
    uid: 64495fb3-f5b7-44db-8853-0d412104e65d
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-0-145-4.us-east-2.compute.internal
    containers:
    - command:
      - /bin/bash
      - -c
      - |
        set -xem
        if [[ -f /env/_master ]]; then
          set -o allexport
          source /env/_master
          set +o allexport
        fi

        quit() {
          echo "$(date -Iseconds) - stopping ovn-northd"
          OVN_MANAGE_OVSDB=no /usr/share/ovn/scripts/ovn-ctl stop_northd
          echo "$(date -Iseconds) - ovn-northd stopped"
          rm -f /var/run/ovn/ovn-northd.pid
          exit 0
        }
        # end of quit
        trap quit TERM INT

        echo "$(date -Iseconds) - starting ovn-northd"
        exec ovn-northd \
          --no-chdir "-vconsole:${OVN_LOG_LEVEL}" -vfile:off "-vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m" \
          --ovnnb-db "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --ovnsb-db "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --pidfile /var/run/ovn/ovn-northd.pid \
          --n-threads=4 \
          -p /ovn-cert/tls.key \
          -c /ovn-cert/tls.crt \
          -C /ovn-ca/ca-bundle.crt &

        wait $!
      env:
      - name: OVN_LOG_LEVEL
        value: info
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/bash
            - -c
            - OVN_MANAGE_OVSDB=no /usr/share/ovn/scripts/ovn-ctl stop_northd
      name: northd
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dz8dr
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - "set -xem\nif [[ -f /env/_master ]]; then\n  set -o allexport\n  source /env/_master\n
        \ set +o allexport\nfi\n\nquit() {\n  echo \"$(date -Iseconds) - stopping
        nbdb\"\n  /usr/share/ovn/scripts/ovn-ctl stop_nb_ovsdb\n  echo \"$(date -Iseconds)
        - nbdb stopped\"\n  rm -f /var/run/ovn/ovnnb_db.pid\n  exit 0\n}\n# end of
        quit\ntrap quit TERM INT\n\nbracketify() { case \"$1\" in *:*) echo \"[$1]\"
        ;; *) echo \"$1\" ;; esac }\n# initialize variables\novn_kubernetes_namespace=openshift-ovn-kubernetes\novndb_ctl_ssl_opts=\"-p
        /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt\"\ntransport=\"ssl\"\novn_raft_conn_ip_url_suffix=\"\"\nif
        [[ \"${K8S_NODE_IP}\" == *\":\"* ]]; then\n  ovn_raft_conn_ip_url_suffix=\":[::]\"\nfi\ndb=\"nb\"\ndb_port=\"9641\"\novn_db_file=\"/etc/ovn/ovn${db}_db.db\"\n#
        checks if a db pod is part of a current cluster\ndb_part_of_cluster() {\n
        \ local pod=${1}\n  local db=${2}\n  local port=${3}\n  echo \"Checking if
        ${pod} is part of cluster\"\n  # TODO: change to use '--request-timeout=5s',
        if https://github.com/kubernetes/kubernetes/issues/49343 is fixed. \n  init_ip=$(timeout
        5 kubectl get pod -n ${ovn_kubernetes_namespace} ${pod} -o=jsonpath='{.status.podIP}')\n
        \ if [[ $? != 0 ]]; then\n    echo \"Unable to get ${pod} ip \"\n    return
        1\n  fi\n  echo \"Found ${pod} ip: $init_ip\"\n  init_ip=$(bracketify $init_ip)\n
        \ target=$(ovn-${db}ctl --timeout=5 --db=${transport}:${init_ip}:${port} ${ovndb_ctl_ssl_opts}
        \\\n            --data=bare --no-headings --columns=target list connection)\n
        \ if [[ \"${target}\" != \"p${transport}:${port}${ovn_raft_conn_ip_url_suffix}\"
        ]]; then\n    echo \"Unable to check correct target ${target} \"\n    return
        1\n  fi\n  echo \"${pod} is part of cluster\"\n  return 0\n}\n# end of db_part_of_cluster\n\n#
        Checks if cluster has already been initialized.\n# If not it returns false
        and sets init_ip to CLUSTER_INITIATOR_IP\ncluster_exists() {\n  local db=${1}\n
        \ local port=${2}\n  # TODO: change to use '--request-timeout=5s', if https://github.com/kubernetes/kubernetes/issues/49343
        is fixed. \n  db_pods=$(timeout 5 kubectl get pod -n ${ovn_kubernetes_namespace}
        -o=jsonpath='{.items[*].metadata.name}' | egrep -o 'ovnkube-master-\\w+' |
        grep -v \"metrics\")\n\n  for db_pod in $db_pods; do\n    if db_part_of_cluster
        $db_pod $db $port; then\n      echo \"${db_pod} is part of current cluster
        with ip: ${init_ip}!\"\n      return 0\n    fi\n  done\n  # if we get here
        \ there is no cluster, set init_ip and get out\n  init_ip=$(bracketify $CLUSTER_INITIATOR_IP)\n
        \ return 1\n}\n# end of cluster_exists()\n\n# RAFT clusters need an odd number
        of members to achieve consensus.\n# The CNO determines which members make
        up the cluster, so if this container\n# is not supposed to be part of the
        cluster, wait forever doing nothing\n# (instad of exiting and causing CrashLoopBackoffs
        for no reason).\nif [[ ! \"ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641\"
        =~ .*\":${K8S_NODE_IP}:\".* ]] && [[ ! \"ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641\"
        =~ .*\":[${K8S_NODE_IP}]:\".* ]]; then\n  echo \"$(date -Iseconds) - not selected
        as RAFT member; sleeping...\"\n  sleep 1500d\n  exit 0\nfi\n\nOVN_ARGS=\"--db-nb-cluster-local-port=9643
        \\\n  --db-nb-cluster-local-addr=$(bracketify ${K8S_NODE_IP}) \\\n  --no-monitor
        \\\n  --db-nb-cluster-local-proto=ssl \\\n  --ovn-nb-db-ssl-key=/ovn-cert/tls.key
        \\\n  --ovn-nb-db-ssl-cert=/ovn-cert/tls.crt \\\n  --ovn-nb-db-ssl-ca-cert=/ovn-ca/ca-bundle.crt\"\n\nCLUSTER_INITIATOR_IP=\"10.0.145.4\"\necho
        \"$(date -Iseconds) - starting nbdb  CLUSTER_INITIATOR_IP=${CLUSTER_INITIATOR_IP},
        K8S_NODE_IP=${K8S_NODE_IP}\"\ninitialize=\"false\"\n\nif [[ ! -e ${ovn_db_file}
        ]]; then\n  initialize=\"true\"\nfi\n\nif [[ \"${initialize}\" == \"true\"
        ]]; then\n  # check to see if a cluster already exists. If it does, just join
        it.\n  counter=0\n  cluster_found=false\n  while [ $counter -lt 5 ]; do\n
        \   if cluster_exists ${db} ${db_port}; then\n      cluster_found=true\n      break\n
        \   fi\n    sleep 1\n    counter=$((counter+1))\n  done\n\n  if ${cluster_found};
        then\n    echo \"Cluster already exists for DB: ${db}\"\n    # join existing
        cluster\n    exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n    --db-nb-cluster-remote-port=9643
        \\\n    --db-nb-cluster-remote-addr=${init_ip} \\\n    --db-nb-cluster-remote-proto=ssl
        \\\n    --ovn-nb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n    run_nb_ovsdb &\n\n    wait $!\n  else\n    # either we need to initialize
        a new cluster or wait for master to create it\n    if [[ \"${K8S_NODE_IP}\"
        == \"${CLUSTER_INITIATOR_IP}\" ]]; then\n      # set DB election timer at
        DB creation time if OVN supports it\n      election_timer=\n      if test
        -n \"$(/usr/share/ovn/scripts/ovn-ctl --help 2>&1 | grep \"\\--db-nb-election-timer\")\";
        then\n        election_timer=\"--db-nb-election-timer=$((10*1000))\"\n      fi\n\n
        \     exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n      --ovn-nb-log=\"-vconsole:${OVN_LOG_LEVEL}
        -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n      ${election_timer} \\\n      run_nb_ovsdb &\n\n      wait $!\n    else\n
        \     echo \"Joining the nbdb cluster with init_ip=${init_ip}...\"\n      exec
        /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n      --db-nb-cluster-remote-port=9643
        \\\n      --db-nb-cluster-remote-addr=${init_ip} \\\n      --db-nb-cluster-remote-proto=ssl
        \\\n      --ovn-nb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n      run_nb_ovsdb &\n\n      wait $!\n    fi\n  fi\nelse\n  exec /usr/share/ovn/scripts/ovn-ctl
        ${OVN_ARGS} \\\n    --ovn-nb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n    run_nb_ovsdb &\n\n    wait $!\nfi\n"
      env:
      - name: OVN_LOG_LEVEL
        value: info
      - name: OVN_NORTHD_PROBE_INTERVAL
        value: "10000"
      - name: K8S_NODE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        postStart:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              set -x
              CLUSTER_INITIATOR_IP="10.0.145.4"
              rm -f /var/run/ovn/ovnnb_db.pid

              # exit early if this DB is not supposed to be part of the cluster
              if [[ ! "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" =~ .*":${K8S_NODE_IP}:".* ]] && [[ ! "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" =~ .*":[${K8S_NODE_IP}]:".* ]]; then
                exit 0
              fi

              # retry an operation a number of times, sleeping 2 seconds between each try
              retry() {
                local tries=${1}
                local desc=${2}
                local cmd=${3}

                local retries=0
                while ! ${cmd}; do
                  (( retries += 1 ))
                  if [[ "${retries}" -gt ${tries} ]]; then
                    echo "$(date -Iseconds) - ERROR - nbdb ${desc} - too many failed attempts, giving up"
                    return 1
                  fi
                  echo "$(date -Iseconds) - WARN - nbdb ${desc} - failed try ${retries}, retrying..."
                  sleep 2
                done
                echo "$(date -Iseconds) - INFO - nbdb ${desc} - success"
                return 0
              }

              if [[ "${K8S_NODE_IP}" == "${CLUSTER_INITIATOR_IP}" ]]; then
                echo "$(date -Iseconds) - nbdb - postStart - waiting for master to be selected"

                # set the connection and inactivity probe
                if ! retry 60 "inactivity-probe" "ovn-nbctl --no-leader-only -t 5 set-connection pssl:9641 -- set connection . inactivity_probe=60000"; then
                  exit 1
                fi

                # Upgrade the db if required.
                DB_SCHEMA="/usr/share/ovn/ovn-nb.ovsschema"
                DB_SERVER="unix:/var/run/ovn/ovnnb_db.sock"
                schema_name=$(ovsdb-tool schema-name $DB_SCHEMA)
                db_version=$(ovsdb-client -t 10 get-schema-version "$DB_SERVER" "$schema_name")
                target_version=$(ovsdb-tool schema-version "$DB_SCHEMA")

                if ovsdb-tool compare-versions "$db_version" == "$target_version"; then
                  :
                elif ovsdb-tool compare-versions "$db_version" ">" "$target_version"; then
                    echo "Database $schema_name has newer schema version ($db_version) than our local schema ($target_version), possibly an upgrade is partially complete?"
                else
                    echo "Upgrading database $schema_name from schema version $db_version to $target_version"
                    ovsdb-client -t 30 convert "$DB_SERVER" "$DB_SCHEMA"
                fi
              fi

              # read the current northd_probe_interval from the DB
              OVN_NB_CTL="ovn-nbctl -p /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt --db "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641""
              northd_probe_interval=${OVN_NORTHD_PROBE_INTERVAL:-10000}
              echo "Setting northd probe interval to ${northd_probe_interval} ms"
              retries=0
              current_probe_interval=0
              while [[ "${retries}" -lt 20 ]]; do
                current_probe_interval=$(${OVN_NB_CTL} --if-exists get NB_GLOBAL . options:northd_probe_interval)
                if [[ $? == 0 ]]; then
                  current_probe_interval=$(echo ${current_probe_interval} | tr -d '\"')
                  break
                else
                  sleep 2
                  (( retries += 1 ))
                fi
              done

              # ensure the northd_probe_interval is set to the configured value
              if [[ "${current_probe_interval}" != "${northd_probe_interval}" ]]; then
                if ! retry 20 "northd-probe" "${OVN_NB_CTL} set NB_GLOBAL . options:northd_probe_interval=${northd_probe_interval}"; then
                  exit 1
                fi
              fi

              # Enable/disable IPsec

              ipsec=false

              if ! retry 20 "ipsec" "${OVN_NB_CTL} set nb_global . ipsec=${ipsec}"; then
                exit 1
              fi
        preStop:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              echo "$(date -Iseconds) - stopping nbdb"
              /usr/share/ovn/scripts/ovn-ctl stop_nb_ovsdb
              echo "$(date -Iseconds) - nbdb stopped"
              rm -f /var/run/ovn/ovnnb_db.pid
      name: nbdb
      ports:
      - containerPort: 9641
        hostPort: 9641
        name: nb-db-port
        protocol: TCP
      - containerPort: 9643
        hostPort: 9643
        name: nb-db-raft-port
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /bin/bash
          - -c
          - |
            set -xeo pipefail
            leader_status=$(/usr/bin/ovn-appctl -t /var/run/ovn/ovnnb_db.ctl --timeout=3 cluster/status OVN_Northbound  2>/dev/null | { grep "Leader: unknown" || true; })
            if [[ ! -z "${leader_status}" ]]; then
              echo "NB DB Raft leader is unknown to the cluster node."
              exit 1
            fi
            # set trim-on-compaction if this DB is supposed to be part of the cluster
            if [[ "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" =~ .*":${K8S_NODE_IP}:".* ]] || [[ "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" =~ .*":[${K8S_NODE_IP}]:".* ]]; then
              /usr/bin/ovn-appctl -t /var/run/ovn/ovnnb_db.ctl --timeout=5 ovsdb-server/memory-trim-on-compaction on 2>/dev/null
            fi
        failureThreshold: 3
        initialDelaySeconds: 90
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dz8dr
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-master-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-master-metrics-cert not mounted. Waiting 20 minutes.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-master-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9102 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29102/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy
      ports:
      - containerPort: 9102
        hostPort: 9102
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-master-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dz8dr
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - "set -xm\nif [[ -f /env/_master ]]; then\n  set -o allexport\n  source /env/_master\n
        \ set +o allexport\nfi\n\nquit() {\n  echo \"$(date -Iseconds) - stopping
        sbdb\"\n  /usr/share/ovn/scripts/ovn-ctl stop_sb_ovsdb\n  echo \"$(date -Iseconds)
        - sbdb stopped\"\n  rm -f /var/run/ovn/ovnsb_db.pid\n  exit 0\n}\n# end of
        quit\ntrap quit TERM INT\n\nbracketify() { case \"$1\" in *:*) echo \"[$1]\"
        ;; *) echo \"$1\" ;; esac }\n\n# initialize variables\novn_kubernetes_namespace=openshift-ovn-kubernetes\novndb_ctl_ssl_opts=\"-p
        /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt\"\ntransport=\"ssl\"\novn_raft_conn_ip_url_suffix=\"\"\nif
        [[ \"${K8S_NODE_IP}\" == *\":\"* ]]; then\n  ovn_raft_conn_ip_url_suffix=\":[::]\"\nfi\ndb=\"sb\"\ndb_port=\"9642\"\novn_db_file=\"/etc/ovn/ovn${db}_db.db\"\n#
        checks if a db pod is part of a current cluster\ndb_part_of_cluster() {\n
        \ local pod=${1}\n  local db=${2}\n  local port=${3}\n  echo \"Checking if
        ${pod} is part of cluster\"\n  # TODO: change to use '--request-timeout=5s',
        if https://github.com/kubernetes/kubernetes/issues/49343 is fixed. \n  init_ip=$(timeout
        5 kubectl get pod -n ${ovn_kubernetes_namespace} ${pod} -o=jsonpath='{.status.podIP}')\n
        \ if [[ $? != 0 ]]; then\n    echo \"Unable to get ${pod} ip \"\n    return
        1\n  fi\n  echo \"Found ${pod} ip: $init_ip\"\n  init_ip=$(bracketify $init_ip)\n
        \ target=$(ovn-${db}ctl --timeout=5 --db=${transport}:${init_ip}:${port} ${ovndb_ctl_ssl_opts}
        \\\n            --data=bare --no-headings --columns=target list connection)\n
        \ if [[ \"${target}\" != \"p${transport}:${port}${ovn_raft_conn_ip_url_suffix}\"
        ]]; then\n    echo \"Unable to check correct target ${target} \"\n    return
        1\n  fi\n  echo \"${pod} is part of cluster\"\n  return 0\n}\n# end of db_part_of_cluster\n\n#
        Checks if cluster has already been initialized.\n# If not it returns false
        and sets init_ip to CLUSTER_INITIATOR_IP\ncluster_exists() {\n  local db=${1}\n
        \ local port=${2}\n  # TODO: change to use '--request-timeout=5s', if https://github.com/kubernetes/kubernetes/issues/49343
        is fixed. \n  db_pods=$(timeout 5 kubectl get pod -n ${ovn_kubernetes_namespace}
        -o=jsonpath='{.items[*].metadata.name}' | egrep -o 'ovnkube-master-\\w+' |
        grep -v \"metrics\")\n\n  for db_pod in $db_pods; do\n    if db_part_of_cluster
        $db_pod $db $port; then\n      echo \"${db_pod} is part of current cluster
        with ip: ${init_ip}!\"\n      return 0\n    fi\n  done\n  # if we get here
        \ there is no cluster, set init_ip and get out\n  init_ip=$(bracketify $CLUSTER_INITIATOR_IP)\n
        \ return 1\n}\n# end of cluster_exists()\n\n# RAFT clusters need an odd number
        of members to achieve consensus.\n# The CNO determines which members make
        up the cluster, so if this container\n# is not supposed to be part of the
        cluster, wait forever doing nothing\n# (instad of exiting and causing CrashLoopBackoffs
        for no reason).\nif [[ ! \"ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642\"
        =~ .*\":${K8S_NODE_IP}:\".* ]] && [[ ! \"ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642\"
        =~ .*\":[${K8S_NODE_IP}]:\".* ]]; then\n  echo \"$(date -Iseconds) - not selected
        as RAFT member; sleeping...\"\n  sleep 1500d\n  exit 0\nfi\n\nOVN_ARGS=\"--db-sb-cluster-local-port=9644
        \\\n  --db-sb-cluster-local-addr=$(bracketify ${K8S_NODE_IP}) \\\n  --no-monitor
        \\\n  --db-sb-cluster-local-proto=ssl \\\n  --ovn-sb-db-ssl-key=/ovn-cert/tls.key
        \\\n  --ovn-sb-db-ssl-cert=/ovn-cert/tls.crt \\\n  --ovn-sb-db-ssl-ca-cert=/ovn-ca/ca-bundle.crt\"\n\nCLUSTER_INITIATOR_IP=\"10.0.145.4\"\necho
        \"$(date -Iseconds) - starting sbdb  CLUSTER_INITIATOR_IP=${CLUSTER_INITIATOR_IP}\"\ninitialize=\"false\"\n\nif
        [[ ! -e ${ovn_db_file} ]]; then\n  initialize=\"true\"\nfi\n\nif [[ \"${initialize}\"
        == \"true\" ]]; then\n  # check to see if a cluster already exists. If it
        does, just join it.\n  counter=0\n  cluster_found=false\n  while [ $counter
        -lt 5 ]; do\n    if cluster_exists ${db} ${db_port}; then\n      cluster_found=true\n
        \     break\n    fi\n    sleep 1\n    counter=$((counter+1))\n  done\n\n  if
        ${cluster_found}; then\n    echo \"Cluster already exists for DB: ${db}\"\n
        \   # join existing cluster\n    exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS}
        \\\n    --db-sb-cluster-remote-port=9644 \\\n    --db-sb-cluster-remote-addr=${init_ip}
        \\\n    --db-sb-cluster-remote-proto=ssl \\\n    --ovn-sb-log=\"-vconsole:${OVN_LOG_LEVEL}
        -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n    run_sb_ovsdb &\n\n    wait $!\n  else\n    # either we need to initialize
        a new cluster or wait for master to create it\n    if [[ \"${K8S_NODE_IP}\"
        == \"${CLUSTER_INITIATOR_IP}\" ]]; then\n      # set DB election timer at
        DB creation time if OVN supports it\n      election_timer=\n      if test
        -n \"$(/usr/share/ovn/scripts/ovn-ctl --help 2>&1 | grep \"\\--db-sb-election-timer\")\";
        then\n        election_timer=\"--db-sb-election-timer=$((16*1000))\"\n      fi\n\n
        \     exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n      --ovn-sb-log=\"-vconsole:${OVN_LOG_LEVEL}
        -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n      ${election_timer} \\\n      run_sb_ovsdb &\n\n      wait $!\n    else\n
        \     exec /usr/share/ovn/scripts/ovn-ctl ${OVN_ARGS} \\\n      --db-sb-cluster-remote-port=9644
        \\\n      --db-sb-cluster-remote-addr=${init_ip} \\\n      --db-sb-cluster-remote-proto=ssl
        \\\n      --ovn-sb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n      run_sb_ovsdb &\n\n      wait $!\n    fi\n  fi\nelse\n  exec /usr/share/ovn/scripts/ovn-ctl
        ${OVN_ARGS} \\\n  --ovn-sb-log=\"-vconsole:${OVN_LOG_LEVEL} -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
        \\\n  run_sb_ovsdb &\n\n  wait $!\nfi\n"
      env:
      - name: OVN_LOG_LEVEL
        value: info
      - name: K8S_NODE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        postStart:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              set -x
              CLUSTER_INITIATOR_IP="10.0.145.4"
              rm -f /var/run/ovn/ovnsb_db.pid

              # exit early if this DB is not supposed to be part of the cluster
              if [[ ! "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" =~ .*":${K8S_NODE_IP}:".* ]] && [[ ! "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" =~ .*":[${K8S_NODE_IP}]:".* ]]; then
                exit 0
              fi

              # retry an operation a number of times, sleeping 2 seconds between each try
              retry() {
                local tries=${1}
                local desc=${2}
                local cmd=${3}

                local retries=0
                while ! ${cmd}; do
                  (( retries += 1 ))
                  if [[ "${retries}" -gt ${tries} ]]; then
                    echo "$(date -Iseconds) - ERROR - nbdb ${desc} - too many failed attempts, giving up"
                    return 1
                  fi
                  echo "$(date -Iseconds) - WARN - nbdb ${desc} - failed try ${retries}, retrying..."
                  sleep 2
                done
                echo "$(date -Iseconds) - INFO - nbdb ${desc} - success"
                return 0
              }

              if [[ "${K8S_NODE_IP}" == "${CLUSTER_INITIATOR_IP}" ]]; then
                echo "$(date -Iseconds) - sdb - postStart - waiting for master to be selected"

                # set the connection and inactivity probe
                if ! retry 60 "inactivity-probe" "ovn-sbctl --no-leader-only -t 5 set-connection pssl:9642 -- set connection . inactivity_probe=180000"; then
                  exit 1
                fi

                # Upgrade the db if required.
                DB_SCHEMA="/usr/share/ovn/ovn-sb.ovsschema"
                DB_SERVER="unix:/var/run/ovn/ovnsb_db.sock"
                schema_name=$(ovsdb-tool schema-name $DB_SCHEMA)
                db_version=$(ovsdb-client -t 10 get-schema-version "$DB_SERVER" "$schema_name")
                target_version=$(ovsdb-tool schema-version "$DB_SCHEMA")

                if ovsdb-tool compare-versions "$db_version" == "$target_version"; then
                  :
                elif ovsdb-tool compare-versions "$db_version" ">" "$target_version"; then
                    echo "Database $schema_name has newer schema version ($db_version) than our local schema ($target_version), possibly an upgrade is partially complete?"
                else
                    echo "Upgrading database $schema_name from schema version $db_version to $target_version"
                    ovsdb-client -t 30 convert "$DB_SERVER" "$DB_SCHEMA"
                fi
              fi

              # Kill some time while the cluster converges by checking IPsec status
              OVN_SB_CTL="ovn-sbctl -p /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt --db "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642""
              if ! retry 20 "ipsec" "${OVN_SB_CTL} get sb_global . ipsec"; then
                exit 1
              fi
        preStop:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              echo "$(date -Iseconds) - stopping sbdb"
              /usr/share/ovn/scripts/ovn-ctl stop_sb_ovsdb
              echo "$(date -Iseconds) - sbdb stopped"
              rm -f /var/run/ovn/ovnsb_db.pid
      name: sbdb
      ports:
      - containerPort: 9642
        hostPort: 9642
        name: sb-db-port
        protocol: TCP
      - containerPort: 9644
        hostPort: 9644
        name: sb-db-raft-port
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /bin/bash
          - -c
          - |
            set -xeo pipefail
            leader_status=$(/usr/bin/ovn-appctl -t /var/run/ovn/ovnsb_db.ctl --timeout=3 cluster/status OVN_Southbound  2>/dev/null | { grep "Leader: unknown" || true; })
            if [[ ! -z "${leader_status}" ]]; then
              echo "SB DB Raft leader is unknown to the cluster node."
              exit 1
            fi
            # set trim-on-compaction if this DB is supposed to be part of the cluster
            if [[ "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" =~ .*":${K8S_NODE_IP}:".* ]] || [[ "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" =~ .*":[${K8S_NODE_IP}]:".* ]]; then
              /usr/bin/ovn-appctl -t /var/run/ovn/ovnsb_db.ctl --timeout=5 ovsdb-server/memory-trim-on-compaction on 2>/dev/null
            fi
        failureThreshold: 3
        initialDelaySeconds: 90
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dz8dr
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        set -xe
        if [[ -f "/env/_master" ]]; then
          set -o allexport
          source "/env/_master"
          set +o allexport
        fi

        if [ "shared" == "shared" ]; then
          gateway_mode_flags="--gateway-mode shared --gateway-interface br-ex"
        elif [ "shared" == "local" ]; then
          gateway_mode_flags="--gateway-mode local --gateway-interface br-ex"
        else
          echo "Invalid OVN_GATEWAY_MODE: \"shared\". Must be \"local\" or \"shared\"."
          exit 1
        fi

        echo "I$(date "+%m%d %H:%M:%S.%N") - ovnkube-master - start ovnkube --init-master ${K8S_NODE}"
        exec /usr/bin/ovnkube \
          --init-master "${K8S_NODE}" \
          --config-file=/run/ovnkube-config/ovnkube.conf \
          --ovn-empty-lb-events \
          --loglevel "${OVN_KUBE_LOG_LEVEL}" \
          --metrics-bind-address "127.0.0.1:29102" \
          --metrics-enable-pprof \
          --metrics-enable-config-duration \
          ${gateway_mode_flags} \
          --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --sb-client-privkey /ovn-cert/tls.key \
          --sb-client-cert /ovn-cert/tls.crt \
          --sb-client-cacert /ovn-ca/ca-bundle.crt \
          --sb-cert-common-name "ovn" \
          --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --nb-client-privkey /ovn-cert/tls.key \
          --nb-client-cert /ovn-cert/tls.crt \
          --nb-client-cacert /ovn-ca/ca-bundle.crt \
          --nb-cert-common-name "ovn" \
          --enable-multicast \
          --disable-snat-multiple-gws \
          --acl-logging-rate-limit "20"
      env:
      - name: OVN_KUBE_LOG_LEVEL
        value: "4"
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovnkube-master
      ports:
      - containerPort: 29102
        hostPort: 29102
        name: metrics-port
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/systemd/system
        name: systemd-units
        readOnly: true
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /run/ovnkube-config/
        name: ovnkube-config
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dz8dr
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        set -xe
        if [[ -f "/env/_master" ]]; then
          set -o allexport
          source "/env/_master"
          set +o allexport
        fi

        echo "I$(date "+%m%d %H:%M:%S.%N") - ovn-dbchecker - start ovn-dbchecker"
        exec /usr/bin/ovndbchecker \
          --config-file=/run/ovnkube-config/ovnkube.conf \
          --loglevel "${OVN_KUBE_LOG_LEVEL}" \
          --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --sb-client-privkey /ovn-cert/tls.key \
          --sb-client-cert /ovn-cert/tls.crt \
          --sb-client-cacert /ovn-ca/ca-bundle.crt \
          --sb-cert-common-name "ovn" \
          --sb-raft-election-timer "16" \
          --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --nb-client-privkey /ovn-cert/tls.key \
          --nb-client-cert /ovn-cert/tls.crt \
          --nb-client-cacert /ovn-ca/ca-bundle.crt \
          --nb-cert-common-name "ovn" \
          --nb-raft-election-timer "10"
      env:
      - name: OVN_KUBE_LOG_LEVEL
        value: "4"
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-dbchecker
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/openvswitch/
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch/
        name: var-lib-openvswitch
      - mountPath: /run/openvswitch/
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /run/ovnkube-config/
        name: ovnkube-config
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dz8dr
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-0-145-4.us-east-2.compute.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
      node-role.kubernetes.io/master: ""
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ovn-kubernetes-controller
    serviceAccountName: ovn-kubernetes-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists
    - key: node.kubernetes.io/not-ready
      operator: Exists
    - key: node.kubernetes.io/unreachable
      operator: Exists
    - key: node.kubernetes.io/network-unavailable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/systemd/system
        type: ""
      name: systemd-units
    - hostPath:
        path: /var/lib/ovn/etc
        type: ""
      name: etc-openvswitch
    - hostPath:
        path: /var/lib/ovn/data
        type: ""
      name: var-lib-openvswitch
    - hostPath:
        path: /var/run/openvswitch
        type: ""
      name: run-openvswitch
    - hostPath:
        path: /var/run/ovn
        type: ""
      name: run-ovn
    - configMap:
        defaultMode: 420
        name: ovnkube-config
      name: ovnkube-config
    - configMap:
        defaultMode: 420
        name: env-overrides
        optional: true
      name: env-overrides
    - configMap:
        defaultMode: 420
        name: ovn-ca
      name: ovn-ca
    - name: ovn-cert
      secret:
        defaultMode: 420
        secretName: ovn-cert
    - name: ovn-master-metrics-cert
      secret:
        defaultMode: 420
        optional: true
        secretName: ovn-master-metrics-cert
    - name: kube-api-access-dz8dr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:39:02Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:41:23Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:41:23Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:39:02Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://a29bbb087e93cdff42adc0b0234cd4332f1a517e234550371640aa3dc808b7f6
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:49Z"
    - containerID: cri-o://3b5886691875036e07915611abbfa8e96ad925fc37e07575f2f0e22d05dfac9b
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: nbdb
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:17Z"
    - containerID: cri-o://2dfda921cf547d6c872ce4d0a81378e601380c540648097597e5845a13c8ef4b
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: northd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:17Z"
    - containerID: cri-o://9b1e0ff583eb660a6413f6085577afe97a0d288912e1ee6a0ce5d20788166ef5
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-dbchecker
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:40:22Z"
    - containerID: cri-o://08fbee809ce4297de22f82f080a2439425d1c76871d6497ccd6bf062cd505745
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovnkube-master
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:40:22Z"
    - containerID: cri-o://15dd6336d29a0bff2e64689a93a33e68b9ee76fd52356f2042757b5a45e31b1e
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: sbdb
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:50Z"
    hostIP: 10.0.145.4
    phase: Running
    podIP: 10.0.145.4
    podIPs:
    - ip: 10.0.145.4
    qosClass: Burstable
    startTime: "2023-01-09T04:39:02Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      networkoperator.openshift.io/ip-family-mode: single-stack
    creationTimestamp: "2023-01-09T04:44:58Z"
    generateName: ovnkube-node-
    labels:
      app: ovnkube-node
      component: network
      controller-revision-hash: 846ff6444c
      kubernetes.io/os: linux
      openshift.io/component: network
      pod-template-generation: "1"
      type: infra
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:networkoperator.openshift.io/ip-family-mode: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:controller-revision-hash: {}
            f:kubernetes.io/os: {}
            f:openshift.io/component: {}
            f:pod-template-generation: {}
            f:type: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a3dc2142-2757-4f53-8296-f18a872cae65"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rbac-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9103,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"kube-rbac-proxy-ovn-metrics"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9105,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"ovn-acl-logging"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/ovn"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovn-controller"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/dev/log"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/ovn"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovnkube-node"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_CONTROLLER_INACTIVITY_PROBE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":29103,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/cni-bin-dir"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/systemd/system"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/netns"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn-kubernetes/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovnkube-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/cni/networks/ovn-k8s-cni-overlay"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"env-overrides"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"etc-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-netd"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-run-netns"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-run-ovn-kubernetes"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-slash"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-var-lib-cni-networks-ovn-kubernetes"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"log-socket"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"node-log"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"ovn-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"ovn-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"ovn-node-metrics-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"ovnkube-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"run-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"run-ovn"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"systemd-units"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-01-09T04:44:58Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              f:lastTransitionTime: {}
              f:status: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.144.137"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-01-09T04:45:34Z"
    name: ovnkube-node-2ltbk
    namespace: openshift-ovn-kubernetes
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: ovnkube-node
      uid: a3dc2142-2757-4f53-8296-f18a872cae65
    resourceVersion: "16728"
    uid: 80079de7-5a69-49ef-9805-acf8142395aa
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-0-144-137.us-east-2.compute.internal
    containers:
    - command:
      - /bin/bash
      - -c
      - "set -e\nif [[ -f \"/env/${K8S_NODE}\" ]]; then\n  set -o allexport\n  source
        \"/env/${K8S_NODE}\"\n  set +o allexport\nfi  \n\necho \"$(date -Iseconds)
        - starting ovn-controller\"\nexec ovn-controller unix:/var/run/openvswitch/db.sock
        -vfile:off \\\n  --no-chdir --pidfile=/var/run/ovn/ovn-controller.pid \\\n
        \ --syslog-method=\"null\" \\\n  --log-file=/var/log/ovn/acl-audit-log.log
        \\\n  -vFACILITY:\"local0\" \\\n  -p /ovn-cert/tls.key -c /ovn-cert/tls.crt
        -C /ovn-ca/ca-bundle.crt \\\n  -vconsole:\"${OVN_LOG_LEVEL}\" -vconsole:\"acl_log:off\"
        \\\n  -vPATTERN:console:\"%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\" \\\n
        \ -vsyslog:\"acl_log:info\" \\\n  -vfile:\"acl_log:info\"\n"
      env:
      - name: OVN_LOG_LEVEL
        value: info
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-controller
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /run/openvswitch
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /etc/openvswitch
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch
        name: var-lib-openvswitch
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/log/ovn
        name: node-log
      - mountPath: /dev/log
        name: log-socket
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-t58k4
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - "set -euo pipefail\n\n# Rotate audit log files when then get to max size (in
        bytes)\nMAXFILESIZE=$(( \"50\"*1000000 )) \nLOGFILE=/var/log/ovn/acl-audit-log.log\nCONTROLLERPID=$(cat
        /run/ovn/ovn-controller.pid)\n\n# Redirect err to null so no messages are
        shown upon rotation\ntail -F ${LOGFILE} 2> /dev/null &\n\nwhile true\ndo\n
        \ # Make sure ovn-controller's logfile exists, and get current size in bytes
        \n  if [ -f \"$LOGFILE\" ]; then \n    file_size=`du -b ${LOGFILE} | tr -s
        '\\t' ' ' | cut -d' ' -f1`\n  else \n    ovs-appctl -t /var/run/ovn/ovn-controller.${CONTROLLERPID}.ctl
        vlog/reopen\n    file_size=`du -b ${LOGFILE} | tr -s '\\t' ' ' | cut -d' '
        -f1`\n  fi \n  \n  if [ $file_size -gt $MAXFILESIZE ];then\n    echo \"Rotating
        OVN ACL Log File\"\n    timestamp=`date '+%Y-%m-%dT%H-%M-%S'`\n    mv ${LOGFILE}
        /var/log/ovn/acl-audit-log.$timestamp.log\n    ovs-appctl -t /run/ovn/ovn-controller.${CONTROLLERPID}.ctl
        vlog/reopen\n    CONTROLLERPID=$(cat /run/ovn/ovn-controller.pid)\n  fi\n\n
        \ # sleep for 30 seconds to avoid wasting CPU \n  sleep 30 \ndone\n"
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-acl-logging
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/log/ovn
        name: node-log
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-t58k4
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        # If it isn't created there is probably an issue so we want to crashloop.
        retries=0
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9103 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29103/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy
      ports:
      - containerPort: 9103
        hostPort: 9103
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-node-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-t58k4
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        # If it isn't created there is probably an issue so we want to crashloop.
        retries=0
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9105 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29105/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy-ovn-metrics
      ports:
      - containerPort: 9105
        hostPort: 9105
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-node-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-t58k4
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        set -xe
        if [[ -f "/env/${K8S_NODE}" ]]; then
          set -o allexport
          source "/env/${K8S_NODE}"
          set +o allexport
        fi
        cp -f /usr/libexec/cni/ovn-k8s-cni-overlay /cni-bin-dir/
        ovn_config_namespace=openshift-ovn-kubernetes
        echo "I$(date "+%m%d %H:%M:%S.%N") - disable conntrack on geneve port"
        iptables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
        iptables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
        ip6tables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
        ip6tables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
        echo "I$(date "+%m%d %H:%M:%S.%N") - starting ovnkube-node"

        if [ "shared" == "shared" ]; then
          gateway_mode_flags="--gateway-mode shared --gateway-interface br-ex"
        elif [ "shared" == "local" ]; then
          gateway_mode_flags="--gateway-mode local --gateway-interface br-ex"
        else
          echo "Invalid OVN_GATEWAY_MODE: \"shared\". Must be \"local\" or \"shared\"."
          exit 1
        fi

        export_network_flows_flags=
        if [[ -n "${NETFLOW_COLLECTORS}" ]] ; then
          export_network_flows_flags="--netflow-targets ${NETFLOW_COLLECTORS}"
        fi
        if [[ -n "${SFLOW_COLLECTORS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --sflow-targets ${SFLOW_COLLECTORS}"
        fi
        if [[ -n "${IPFIX_COLLECTORS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-targets ${IPFIX_COLLECTORS}"
        fi
        if [[ -n "${IPFIX_CACHE_MAX_FLOWS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-cache-max-flows ${IPFIX_CACHE_MAX_FLOWS}"
        fi
        if [[ -n "${IPFIX_CACHE_ACTIVE_TIMEOUT}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-cache-active-timeout ${IPFIX_CACHE_ACTIVE_TIMEOUT}"
        fi
        if [[ -n "${IPFIX_SAMPLING}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-sampling ${IPFIX_SAMPLING}"
        fi
        gw_interface_flag=
        # if br-ex1 is configured on the node, we want to use it for external gateway traffic
        if [ -d /sys/class/net/br-ex1 ]; then
          gw_interface_flag="--exgw-interface=br-ex1"
        fi

        node_mgmt_port_netdev_flags=
        if [[ -n "${OVNKUBE_NODE_MGMT_PORT_NETDEV}" ]] ; then
          node_mgmt_port_netdev_flags="--ovnkube-node-mgmt-port-netdev ${OVNKUBE_NODE_MGMT_PORT_NETDEV}"
        fi

        exec /usr/bin/ovnkube --init-node "${K8S_NODE}" \
          --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --nb-client-privkey /ovn-cert/tls.key \
          --nb-client-cert /ovn-cert/tls.crt \
          --nb-client-cacert /ovn-ca/ca-bundle.crt \
          --nb-cert-common-name "ovn" \
          --sb-client-privkey /ovn-cert/tls.key \
          --sb-client-cert /ovn-cert/tls.crt \
          --sb-client-cacert /ovn-ca/ca-bundle.crt \
          --sb-cert-common-name "ovn" \
          --config-file=/run/ovnkube-config/ovnkube.conf \
          --loglevel "${OVN_KUBE_LOG_LEVEL}" \
          --inactivity-probe="${OVN_CONTROLLER_INACTIVITY_PROBE}" \
          ${gateway_mode_flags} \
          --metrics-bind-address "127.0.0.1:29103" \
          --ovn-metrics-bind-address "127.0.0.1:29105" \
          --metrics-enable-pprof \
          --export-ovs-metrics \
          --disable-snat-multiple-gws \
          ${export_network_flows_flags} \
          ${gw_interface_flag}
      env:
      - name: KUBERNETES_SERVICE_PORT
        value: "6443"
      - name: KUBERNETES_SERVICE_HOST
        value: api-int.sn-loggvls-jsm.qe.devcluster.openshift.com
      - name: OVN_CONTROLLER_INACTIVITY_PROBE
        value: "180000"
      - name: OVN_KUBE_LOG_LEVEL
        value: "4"
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - rm
            - -f
            - /etc/cni/net.d/10-ovn-kubernetes.conf
      name: ovnkube-node
      ports:
      - containerPort: 29103
        hostPort: 29103
        name: metrics-port
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - test
          - -f
          - /etc/cni/net.d/10-ovn-kubernetes.conf
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/systemd/system
        name: systemd-units
        readOnly: true
      - mountPath: /host
        mountPropagation: HostToContainer
        name: host-slash
        readOnly: true
      - mountPath: /run/ovn-kubernetes/
        name: host-run-ovn-kubernetes
      - mountPath: /run/netns
        mountPropagation: HostToContainer
        name: host-run-netns
        readOnly: true
      - mountPath: /cni-bin-dir
        name: host-cni-bin
      - mountPath: /etc/cni/net.d
        name: host-cni-netd
      - mountPath: /var/lib/cni/networks/ovn-k8s-cni-overlay
        name: host-var-lib-cni-networks-ovn-kubernetes
      - mountPath: /run/openvswitch
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /etc/openvswitch
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch
        name: var-lib-openvswitch
      - mountPath: /run/ovnkube-config/
        name: ovnkube-config
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-t58k4
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-10-0-144-137.us-east-2.compute.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ovn-kubernetes-node
    serviceAccountName: ovn-kubernetes-node
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - hostPath:
        path: /etc/systemd/system
        type: ""
      name: systemd-units
    - hostPath:
        path: /
        type: ""
      name: host-slash
    - hostPath:
        path: /run/netns
        type: ""
      name: host-run-netns
    - hostPath:
        path: /var/lib/openvswitch/data
        type: ""
      name: var-lib-openvswitch
    - hostPath:
        path: /etc/openvswitch
        type: ""
      name: etc-openvswitch
    - hostPath:
        path: /var/run/openvswitch
        type: ""
      name: run-openvswitch
    - hostPath:
        path: /var/run/ovn
        type: ""
      name: run-ovn
    - hostPath:
        path: /var/log/ovn
        type: ""
      name: node-log
    - hostPath:
        path: /dev/log
        type: ""
      name: log-socket
    - hostPath:
        path: /run/ovn-kubernetes
        type: ""
      name: host-run-ovn-kubernetes
    - hostPath:
        path: /var/lib/cni/bin
        type: ""
      name: host-cni-bin
    - hostPath:
        path: /var/run/multus/cni/net.d
        type: ""
      name: host-cni-netd
    - hostPath:
        path: /var/lib/cni/networks/ovn-k8s-cni-overlay
        type: ""
      name: host-var-lib-cni-networks-ovn-kubernetes
    - configMap:
        defaultMode: 420
        name: ovnkube-config
      name: ovnkube-config
    - configMap:
        defaultMode: 420
        name: env-overrides
        optional: true
      name: env-overrides
    - configMap:
        defaultMode: 420
        name: ovn-ca
      name: ovn-ca
    - name: ovn-cert
      secret:
        defaultMode: 420
        secretName: ovn-cert
    - name: ovn-node-metrics-cert
      secret:
        defaultMode: 420
        optional: true
        secretName: ovn-node-metrics-cert
    - name: kube-api-access-t58k4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:45:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:45:34Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:45:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:45:03Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://c6acc774c505becdc500aba24c0a226032f705db51a5996060b99e02afc8b130
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:45:27Z"
    - containerID: cri-o://1bf744ecb3c25e8a3fa5ee291c48dd3576cc9a0491e9fdeac28014c89bd14684
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy-ovn-metrics
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:45:27Z"
    - containerID: cri-o://aba3a77f1bd7e8a2bfbc61eff78a236913fcfb5e9f1aa0381982c526c404ebb8
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-acl-logging
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:45:25Z"
    - containerID: cri-o://57fa3e920d2b277353bb2e1d685d27efcb691a4602eaf00f860c66e32b5de84e
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:45:25Z"
    - containerID: cri-o://f51036065c8024eee855177a1a68029dabc5f731a1abd52363104df7f491bce8
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovnkube-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:45:28Z"
    hostIP: 10.0.144.137
    phase: Running
    podIP: 10.0.144.137
    podIPs:
    - ip: 10.0.144.137
    qosClass: Burstable
    startTime: "2023-01-09T04:45:03Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      networkoperator.openshift.io/ip-family-mode: single-stack
    creationTimestamp: "2023-01-09T04:39:03Z"
    generateName: ovnkube-node-
    labels:
      app: ovnkube-node
      component: network
      controller-revision-hash: 846ff6444c
      kubernetes.io/os: linux
      openshift.io/component: network
      pod-template-generation: "1"
      type: infra
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:networkoperator.openshift.io/ip-family-mode: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:controller-revision-hash: {}
            f:kubernetes.io/os: {}
            f:openshift.io/component: {}
            f:pod-template-generation: {}
            f:type: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a3dc2142-2757-4f53-8296-f18a872cae65"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rbac-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9103,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"kube-rbac-proxy-ovn-metrics"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9105,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"ovn-acl-logging"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/ovn"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovn-controller"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/dev/log"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/ovn"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovnkube-node"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_CONTROLLER_INACTIVITY_PROBE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":29103,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/cni-bin-dir"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/systemd/system"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/netns"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn-kubernetes/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovnkube-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/cni/networks/ovn-k8s-cni-overlay"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"env-overrides"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"etc-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-netd"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-run-netns"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-run-ovn-kubernetes"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-slash"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-var-lib-cni-networks-ovn-kubernetes"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"log-socket"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"node-log"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"ovn-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"ovn-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"ovn-node-metrics-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"ovnkube-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"run-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"run-ovn"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"systemd-units"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-01-09T04:39:03Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.199.219"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-01-09T04:40:43Z"
    name: ovnkube-node-4b9fr
    namespace: openshift-ovn-kubernetes
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: ovnkube-node
      uid: a3dc2142-2757-4f53-8296-f18a872cae65
    resourceVersion: "3714"
    uid: 044e2c3e-8fc5-430e-a4d4-b857992ef386
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-0-199-219.us-east-2.compute.internal
    containers:
    - command:
      - /bin/bash
      - -c
      - "set -e\nif [[ -f \"/env/${K8S_NODE}\" ]]; then\n  set -o allexport\n  source
        \"/env/${K8S_NODE}\"\n  set +o allexport\nfi  \n\necho \"$(date -Iseconds)
        - starting ovn-controller\"\nexec ovn-controller unix:/var/run/openvswitch/db.sock
        -vfile:off \\\n  --no-chdir --pidfile=/var/run/ovn/ovn-controller.pid \\\n
        \ --syslog-method=\"null\" \\\n  --log-file=/var/log/ovn/acl-audit-log.log
        \\\n  -vFACILITY:\"local0\" \\\n  -p /ovn-cert/tls.key -c /ovn-cert/tls.crt
        -C /ovn-ca/ca-bundle.crt \\\n  -vconsole:\"${OVN_LOG_LEVEL}\" -vconsole:\"acl_log:off\"
        \\\n  -vPATTERN:console:\"%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\" \\\n
        \ -vsyslog:\"acl_log:info\" \\\n  -vfile:\"acl_log:info\"\n"
      env:
      - name: OVN_LOG_LEVEL
        value: info
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-controller
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /run/openvswitch
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /etc/openvswitch
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch
        name: var-lib-openvswitch
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/log/ovn
        name: node-log
      - mountPath: /dev/log
        name: log-socket
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8btc8
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - "set -euo pipefail\n\n# Rotate audit log files when then get to max size (in
        bytes)\nMAXFILESIZE=$(( \"50\"*1000000 )) \nLOGFILE=/var/log/ovn/acl-audit-log.log\nCONTROLLERPID=$(cat
        /run/ovn/ovn-controller.pid)\n\n# Redirect err to null so no messages are
        shown upon rotation\ntail -F ${LOGFILE} 2> /dev/null &\n\nwhile true\ndo\n
        \ # Make sure ovn-controller's logfile exists, and get current size in bytes
        \n  if [ -f \"$LOGFILE\" ]; then \n    file_size=`du -b ${LOGFILE} | tr -s
        '\\t' ' ' | cut -d' ' -f1`\n  else \n    ovs-appctl -t /var/run/ovn/ovn-controller.${CONTROLLERPID}.ctl
        vlog/reopen\n    file_size=`du -b ${LOGFILE} | tr -s '\\t' ' ' | cut -d' '
        -f1`\n  fi \n  \n  if [ $file_size -gt $MAXFILESIZE ];then\n    echo \"Rotating
        OVN ACL Log File\"\n    timestamp=`date '+%Y-%m-%dT%H-%M-%S'`\n    mv ${LOGFILE}
        /var/log/ovn/acl-audit-log.$timestamp.log\n    ovs-appctl -t /run/ovn/ovn-controller.${CONTROLLERPID}.ctl
        vlog/reopen\n    CONTROLLERPID=$(cat /run/ovn/ovn-controller.pid)\n  fi\n\n
        \ # sleep for 30 seconds to avoid wasting CPU \n  sleep 30 \ndone\n"
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-acl-logging
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/log/ovn
        name: node-log
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8btc8
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        # If it isn't created there is probably an issue so we want to crashloop.
        retries=0
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9103 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29103/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy
      ports:
      - containerPort: 9103
        hostPort: 9103
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-node-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8btc8
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        # If it isn't created there is probably an issue so we want to crashloop.
        retries=0
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9105 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29105/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy-ovn-metrics
      ports:
      - containerPort: 9105
        hostPort: 9105
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-node-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8btc8
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        set -xe
        if [[ -f "/env/${K8S_NODE}" ]]; then
          set -o allexport
          source "/env/${K8S_NODE}"
          set +o allexport
        fi
        cp -f /usr/libexec/cni/ovn-k8s-cni-overlay /cni-bin-dir/
        ovn_config_namespace=openshift-ovn-kubernetes
        echo "I$(date "+%m%d %H:%M:%S.%N") - disable conntrack on geneve port"
        iptables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
        iptables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
        ip6tables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
        ip6tables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
        echo "I$(date "+%m%d %H:%M:%S.%N") - starting ovnkube-node"

        if [ "shared" == "shared" ]; then
          gateway_mode_flags="--gateway-mode shared --gateway-interface br-ex"
        elif [ "shared" == "local" ]; then
          gateway_mode_flags="--gateway-mode local --gateway-interface br-ex"
        else
          echo "Invalid OVN_GATEWAY_MODE: \"shared\". Must be \"local\" or \"shared\"."
          exit 1
        fi

        export_network_flows_flags=
        if [[ -n "${NETFLOW_COLLECTORS}" ]] ; then
          export_network_flows_flags="--netflow-targets ${NETFLOW_COLLECTORS}"
        fi
        if [[ -n "${SFLOW_COLLECTORS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --sflow-targets ${SFLOW_COLLECTORS}"
        fi
        if [[ -n "${IPFIX_COLLECTORS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-targets ${IPFIX_COLLECTORS}"
        fi
        if [[ -n "${IPFIX_CACHE_MAX_FLOWS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-cache-max-flows ${IPFIX_CACHE_MAX_FLOWS}"
        fi
        if [[ -n "${IPFIX_CACHE_ACTIVE_TIMEOUT}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-cache-active-timeout ${IPFIX_CACHE_ACTIVE_TIMEOUT}"
        fi
        if [[ -n "${IPFIX_SAMPLING}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-sampling ${IPFIX_SAMPLING}"
        fi
        gw_interface_flag=
        # if br-ex1 is configured on the node, we want to use it for external gateway traffic
        if [ -d /sys/class/net/br-ex1 ]; then
          gw_interface_flag="--exgw-interface=br-ex1"
        fi

        node_mgmt_port_netdev_flags=
        if [[ -n "${OVNKUBE_NODE_MGMT_PORT_NETDEV}" ]] ; then
          node_mgmt_port_netdev_flags="--ovnkube-node-mgmt-port-netdev ${OVNKUBE_NODE_MGMT_PORT_NETDEV}"
        fi

        exec /usr/bin/ovnkube --init-node "${K8S_NODE}" \
          --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --nb-client-privkey /ovn-cert/tls.key \
          --nb-client-cert /ovn-cert/tls.crt \
          --nb-client-cacert /ovn-ca/ca-bundle.crt \
          --nb-cert-common-name "ovn" \
          --sb-client-privkey /ovn-cert/tls.key \
          --sb-client-cert /ovn-cert/tls.crt \
          --sb-client-cacert /ovn-ca/ca-bundle.crt \
          --sb-cert-common-name "ovn" \
          --config-file=/run/ovnkube-config/ovnkube.conf \
          --loglevel "${OVN_KUBE_LOG_LEVEL}" \
          --inactivity-probe="${OVN_CONTROLLER_INACTIVITY_PROBE}" \
          ${gateway_mode_flags} \
          --metrics-bind-address "127.0.0.1:29103" \
          --ovn-metrics-bind-address "127.0.0.1:29105" \
          --metrics-enable-pprof \
          --export-ovs-metrics \
          --disable-snat-multiple-gws \
          ${export_network_flows_flags} \
          ${gw_interface_flag}
      env:
      - name: KUBERNETES_SERVICE_PORT
        value: "6443"
      - name: KUBERNETES_SERVICE_HOST
        value: api-int.sn-loggvls-jsm.qe.devcluster.openshift.com
      - name: OVN_CONTROLLER_INACTIVITY_PROBE
        value: "180000"
      - name: OVN_KUBE_LOG_LEVEL
        value: "4"
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - rm
            - -f
            - /etc/cni/net.d/10-ovn-kubernetes.conf
      name: ovnkube-node
      ports:
      - containerPort: 29103
        hostPort: 29103
        name: metrics-port
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - test
          - -f
          - /etc/cni/net.d/10-ovn-kubernetes.conf
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/systemd/system
        name: systemd-units
        readOnly: true
      - mountPath: /host
        mountPropagation: HostToContainer
        name: host-slash
        readOnly: true
      - mountPath: /run/ovn-kubernetes/
        name: host-run-ovn-kubernetes
      - mountPath: /run/netns
        mountPropagation: HostToContainer
        name: host-run-netns
        readOnly: true
      - mountPath: /cni-bin-dir
        name: host-cni-bin
      - mountPath: /etc/cni/net.d
        name: host-cni-netd
      - mountPath: /var/lib/cni/networks/ovn-k8s-cni-overlay
        name: host-var-lib-cni-networks-ovn-kubernetes
      - mountPath: /run/openvswitch
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /etc/openvswitch
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch
        name: var-lib-openvswitch
      - mountPath: /run/ovnkube-config/
        name: ovnkube-config
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8btc8
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-10-0-199-219.us-east-2.compute.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ovn-kubernetes-node
    serviceAccountName: ovn-kubernetes-node
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - hostPath:
        path: /etc/systemd/system
        type: ""
      name: systemd-units
    - hostPath:
        path: /
        type: ""
      name: host-slash
    - hostPath:
        path: /run/netns
        type: ""
      name: host-run-netns
    - hostPath:
        path: /var/lib/openvswitch/data
        type: ""
      name: var-lib-openvswitch
    - hostPath:
        path: /etc/openvswitch
        type: ""
      name: etc-openvswitch
    - hostPath:
        path: /var/run/openvswitch
        type: ""
      name: run-openvswitch
    - hostPath:
        path: /var/run/ovn
        type: ""
      name: run-ovn
    - hostPath:
        path: /var/log/ovn
        type: ""
      name: node-log
    - hostPath:
        path: /dev/log
        type: ""
      name: log-socket
    - hostPath:
        path: /run/ovn-kubernetes
        type: ""
      name: host-run-ovn-kubernetes
    - hostPath:
        path: /var/lib/cni/bin
        type: ""
      name: host-cni-bin
    - hostPath:
        path: /var/run/multus/cni/net.d
        type: ""
      name: host-cni-netd
    - hostPath:
        path: /var/lib/cni/networks/ovn-k8s-cni-overlay
        type: ""
      name: host-var-lib-cni-networks-ovn-kubernetes
    - configMap:
        defaultMode: 420
        name: ovnkube-config
      name: ovnkube-config
    - configMap:
        defaultMode: 420
        name: env-overrides
        optional: true
      name: env-overrides
    - configMap:
        defaultMode: 420
        name: ovn-ca
      name: ovn-ca
    - name: ovn-cert
      secret:
        defaultMode: 420
        secretName: ovn-cert
    - name: ovn-node-metrics-cert
      secret:
        defaultMode: 420
        optional: true
        secretName: ovn-node-metrics-cert
    - name: kube-api-access-8btc8
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:39:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:40:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:40:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:39:03Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://694536fbf74b99695313fcc855c83b5018965c7d381e4fd4b22460efba43ad0c
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:18Z"
    - containerID: cri-o://80e40f3c90c7f638073c723a838df76e8eaff0d72487f8914bdd0cdc19948b85
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy-ovn-metrics
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:18Z"
    - containerID: cri-o://3191252ceaa58251952dba7fb35038c9845f9f30e1b756034b543931ea8a5bca
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-acl-logging
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:16Z"
    - containerID: cri-o://08ad4d74905f6bcefd1a736880d874fc0ed16cdfce53bc70f3206ad1423902c9
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:15Z"
    - containerID: cri-o://9abb183fd8cd63e8b97268b1715fb8bb50f70d0ddd129bdee4a2e79a98e04afd
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovnkube-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:18Z"
    hostIP: 10.0.199.219
    phase: Running
    podIP: 10.0.199.219
    podIPs:
    - ip: 10.0.199.219
    qosClass: Burstable
    startTime: "2023-01-09T04:39:03Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      networkoperator.openshift.io/ip-family-mode: single-stack
    creationTimestamp: "2023-01-09T05:32:59Z"
    generateName: ovnkube-node-
    labels:
      app: ovnkube-node
      component: network
      controller-revision-hash: 846ff6444c
      kubernetes.io/os: linux
      openshift.io/component: network
      pod-template-generation: "1"
      type: infra
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:networkoperator.openshift.io/ip-family-mode: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:controller-revision-hash: {}
            f:kubernetes.io/os: {}
            f:openshift.io/component: {}
            f:pod-template-generation: {}
            f:type: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a3dc2142-2757-4f53-8296-f18a872cae65"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rbac-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9103,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"kube-rbac-proxy-ovn-metrics"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9105,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"ovn-acl-logging"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/ovn"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovn-controller"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/dev/log"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/ovn"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovnkube-node"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_CONTROLLER_INACTIVITY_PROBE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":29103,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/cni-bin-dir"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/systemd/system"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/netns"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn-kubernetes/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovnkube-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/cni/networks/ovn-k8s-cni-overlay"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"env-overrides"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"etc-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-netd"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-run-netns"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-run-ovn-kubernetes"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-slash"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-var-lib-cni-networks-ovn-kubernetes"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"log-socket"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"node-log"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"ovn-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"ovn-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"ovn-node-metrics-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"ovnkube-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"run-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"run-ovn"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"systemd-units"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-01-09T05:32:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.190.242"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-01-09T05:33:32Z"
    name: ovnkube-node-cmjkq
    namespace: openshift-ovn-kubernetes
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: ovnkube-node
      uid: a3dc2142-2757-4f53-8296-f18a872cae65
    resourceVersion: "44978"
    uid: 27687212-cb1e-4e22-8014-8b7299037d41
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-0-190-242.us-east-2.compute.internal
    containers:
    - command:
      - /bin/bash
      - -c
      - "set -e\nif [[ -f \"/env/${K8S_NODE}\" ]]; then\n  set -o allexport\n  source
        \"/env/${K8S_NODE}\"\n  set +o allexport\nfi  \n\necho \"$(date -Iseconds)
        - starting ovn-controller\"\nexec ovn-controller unix:/var/run/openvswitch/db.sock
        -vfile:off \\\n  --no-chdir --pidfile=/var/run/ovn/ovn-controller.pid \\\n
        \ --syslog-method=\"null\" \\\n  --log-file=/var/log/ovn/acl-audit-log.log
        \\\n  -vFACILITY:\"local0\" \\\n  -p /ovn-cert/tls.key -c /ovn-cert/tls.crt
        -C /ovn-ca/ca-bundle.crt \\\n  -vconsole:\"${OVN_LOG_LEVEL}\" -vconsole:\"acl_log:off\"
        \\\n  -vPATTERN:console:\"%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\" \\\n
        \ -vsyslog:\"acl_log:info\" \\\n  -vfile:\"acl_log:info\"\n"
      env:
      - name: OVN_LOG_LEVEL
        value: info
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-controller
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /run/openvswitch
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /etc/openvswitch
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch
        name: var-lib-openvswitch
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/log/ovn
        name: node-log
      - mountPath: /dev/log
        name: log-socket
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-w8lsj
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - "set -euo pipefail\n\n# Rotate audit log files when then get to max size (in
        bytes)\nMAXFILESIZE=$(( \"50\"*1000000 )) \nLOGFILE=/var/log/ovn/acl-audit-log.log\nCONTROLLERPID=$(cat
        /run/ovn/ovn-controller.pid)\n\n# Redirect err to null so no messages are
        shown upon rotation\ntail -F ${LOGFILE} 2> /dev/null &\n\nwhile true\ndo\n
        \ # Make sure ovn-controller's logfile exists, and get current size in bytes
        \n  if [ -f \"$LOGFILE\" ]; then \n    file_size=`du -b ${LOGFILE} | tr -s
        '\\t' ' ' | cut -d' ' -f1`\n  else \n    ovs-appctl -t /var/run/ovn/ovn-controller.${CONTROLLERPID}.ctl
        vlog/reopen\n    file_size=`du -b ${LOGFILE} | tr -s '\\t' ' ' | cut -d' '
        -f1`\n  fi \n  \n  if [ $file_size -gt $MAXFILESIZE ];then\n    echo \"Rotating
        OVN ACL Log File\"\n    timestamp=`date '+%Y-%m-%dT%H-%M-%S'`\n    mv ${LOGFILE}
        /var/log/ovn/acl-audit-log.$timestamp.log\n    ovs-appctl -t /run/ovn/ovn-controller.${CONTROLLERPID}.ctl
        vlog/reopen\n    CONTROLLERPID=$(cat /run/ovn/ovn-controller.pid)\n  fi\n\n
        \ # sleep for 30 seconds to avoid wasting CPU \n  sleep 30 \ndone\n"
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-acl-logging
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/log/ovn
        name: node-log
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-w8lsj
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        # If it isn't created there is probably an issue so we want to crashloop.
        retries=0
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9103 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29103/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy
      ports:
      - containerPort: 9103
        hostPort: 9103
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-node-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-w8lsj
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        # If it isn't created there is probably an issue so we want to crashloop.
        retries=0
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9105 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29105/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy-ovn-metrics
      ports:
      - containerPort: 9105
        hostPort: 9105
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-node-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-w8lsj
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        set -xe
        if [[ -f "/env/${K8S_NODE}" ]]; then
          set -o allexport
          source "/env/${K8S_NODE}"
          set +o allexport
        fi
        cp -f /usr/libexec/cni/ovn-k8s-cni-overlay /cni-bin-dir/
        ovn_config_namespace=openshift-ovn-kubernetes
        echo "I$(date "+%m%d %H:%M:%S.%N") - disable conntrack on geneve port"
        iptables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
        iptables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
        ip6tables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
        ip6tables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
        echo "I$(date "+%m%d %H:%M:%S.%N") - starting ovnkube-node"

        if [ "shared" == "shared" ]; then
          gateway_mode_flags="--gateway-mode shared --gateway-interface br-ex"
        elif [ "shared" == "local" ]; then
          gateway_mode_flags="--gateway-mode local --gateway-interface br-ex"
        else
          echo "Invalid OVN_GATEWAY_MODE: \"shared\". Must be \"local\" or \"shared\"."
          exit 1
        fi

        export_network_flows_flags=
        if [[ -n "${NETFLOW_COLLECTORS}" ]] ; then
          export_network_flows_flags="--netflow-targets ${NETFLOW_COLLECTORS}"
        fi
        if [[ -n "${SFLOW_COLLECTORS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --sflow-targets ${SFLOW_COLLECTORS}"
        fi
        if [[ -n "${IPFIX_COLLECTORS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-targets ${IPFIX_COLLECTORS}"
        fi
        if [[ -n "${IPFIX_CACHE_MAX_FLOWS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-cache-max-flows ${IPFIX_CACHE_MAX_FLOWS}"
        fi
        if [[ -n "${IPFIX_CACHE_ACTIVE_TIMEOUT}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-cache-active-timeout ${IPFIX_CACHE_ACTIVE_TIMEOUT}"
        fi
        if [[ -n "${IPFIX_SAMPLING}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-sampling ${IPFIX_SAMPLING}"
        fi
        gw_interface_flag=
        # if br-ex1 is configured on the node, we want to use it for external gateway traffic
        if [ -d /sys/class/net/br-ex1 ]; then
          gw_interface_flag="--exgw-interface=br-ex1"
        fi

        node_mgmt_port_netdev_flags=
        if [[ -n "${OVNKUBE_NODE_MGMT_PORT_NETDEV}" ]] ; then
          node_mgmt_port_netdev_flags="--ovnkube-node-mgmt-port-netdev ${OVNKUBE_NODE_MGMT_PORT_NETDEV}"
        fi

        exec /usr/bin/ovnkube --init-node "${K8S_NODE}" \
          --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --nb-client-privkey /ovn-cert/tls.key \
          --nb-client-cert /ovn-cert/tls.crt \
          --nb-client-cacert /ovn-ca/ca-bundle.crt \
          --nb-cert-common-name "ovn" \
          --sb-client-privkey /ovn-cert/tls.key \
          --sb-client-cert /ovn-cert/tls.crt \
          --sb-client-cacert /ovn-ca/ca-bundle.crt \
          --sb-cert-common-name "ovn" \
          --config-file=/run/ovnkube-config/ovnkube.conf \
          --loglevel "${OVN_KUBE_LOG_LEVEL}" \
          --inactivity-probe="${OVN_CONTROLLER_INACTIVITY_PROBE}" \
          ${gateway_mode_flags} \
          --metrics-bind-address "127.0.0.1:29103" \
          --ovn-metrics-bind-address "127.0.0.1:29105" \
          --metrics-enable-pprof \
          --export-ovs-metrics \
          --disable-snat-multiple-gws \
          ${export_network_flows_flags} \
          ${gw_interface_flag}
      env:
      - name: KUBERNETES_SERVICE_PORT
        value: "6443"
      - name: KUBERNETES_SERVICE_HOST
        value: api-int.sn-loggvls-jsm.qe.devcluster.openshift.com
      - name: OVN_CONTROLLER_INACTIVITY_PROBE
        value: "180000"
      - name: OVN_KUBE_LOG_LEVEL
        value: "4"
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - rm
            - -f
            - /etc/cni/net.d/10-ovn-kubernetes.conf
      name: ovnkube-node
      ports:
      - containerPort: 29103
        hostPort: 29103
        name: metrics-port
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - test
          - -f
          - /etc/cni/net.d/10-ovn-kubernetes.conf
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/systemd/system
        name: systemd-units
        readOnly: true
      - mountPath: /host
        mountPropagation: HostToContainer
        name: host-slash
        readOnly: true
      - mountPath: /run/ovn-kubernetes/
        name: host-run-ovn-kubernetes
      - mountPath: /run/netns
        mountPropagation: HostToContainer
        name: host-run-netns
        readOnly: true
      - mountPath: /cni-bin-dir
        name: host-cni-bin
      - mountPath: /etc/cni/net.d
        name: host-cni-netd
      - mountPath: /var/lib/cni/networks/ovn-k8s-cni-overlay
        name: host-var-lib-cni-networks-ovn-kubernetes
      - mountPath: /run/openvswitch
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /etc/openvswitch
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch
        name: var-lib-openvswitch
      - mountPath: /run/ovnkube-config/
        name: ovnkube-config
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-w8lsj
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    imagePullSecrets:
    - name: ovn-kubernetes-node-dockercfg-mntnh
    nodeName: ip-10-0-190-242.us-east-2.compute.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ovn-kubernetes-node
    serviceAccountName: ovn-kubernetes-node
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - hostPath:
        path: /etc/systemd/system
        type: ""
      name: systemd-units
    - hostPath:
        path: /
        type: ""
      name: host-slash
    - hostPath:
        path: /run/netns
        type: ""
      name: host-run-netns
    - hostPath:
        path: /var/lib/openvswitch/data
        type: ""
      name: var-lib-openvswitch
    - hostPath:
        path: /etc/openvswitch
        type: ""
      name: etc-openvswitch
    - hostPath:
        path: /var/run/openvswitch
        type: ""
      name: run-openvswitch
    - hostPath:
        path: /var/run/ovn
        type: ""
      name: run-ovn
    - hostPath:
        path: /var/log/ovn
        type: ""
      name: node-log
    - hostPath:
        path: /dev/log
        type: ""
      name: log-socket
    - hostPath:
        path: /run/ovn-kubernetes
        type: ""
      name: host-run-ovn-kubernetes
    - hostPath:
        path: /var/lib/cni/bin
        type: ""
      name: host-cni-bin
    - hostPath:
        path: /var/run/multus/cni/net.d
        type: ""
      name: host-cni-netd
    - hostPath:
        path: /var/lib/cni/networks/ovn-k8s-cni-overlay
        type: ""
      name: host-var-lib-cni-networks-ovn-kubernetes
    - configMap:
        defaultMode: 420
        name: ovnkube-config
      name: ovnkube-config
    - configMap:
        defaultMode: 420
        name: env-overrides
        optional: true
      name: env-overrides
    - configMap:
        defaultMode: 420
        name: ovn-ca
      name: ovn-ca
    - name: ovn-cert
      secret:
        defaultMode: 420
        secretName: ovn-cert
    - name: ovn-node-metrics-cert
      secret:
        defaultMode: 420
        optional: true
        secretName: ovn-node-metrics-cert
    - name: kube-api-access-w8lsj
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T05:32:58Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T05:33:32Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T05:33:32Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T05:32:59Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://15faf04320a9f3a57580e3c5ed005181a463eb35c289fc5afebca254413f3e78
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T05:33:25Z"
    - containerID: cri-o://98d2cb4d33eaf99c7c2cc0bc332d638693ce52376795c36de32d59c645a01b19
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy-ovn-metrics
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T05:33:25Z"
    - containerID: cri-o://b6e591be67b558a02ced71996592e371e4e2b94a34af357038ab2dba43f90abe
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-acl-logging
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T05:33:22Z"
    - containerID: cri-o://d7eadc910ee81bbd259647f2ddb22784997eb936df870b1cadc8068179016e1c
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T05:33:22Z"
    - containerID: cri-o://3d21695527a929af1294482572fcdb63fdd1a1e20febcc36b746aced282db542
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovnkube-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T05:33:25Z"
    hostIP: 10.0.190.242
    phase: Running
    podIP: 10.0.190.242
    podIPs:
    - ip: 10.0.190.242
    qosClass: Burstable
    startTime: "2023-01-09T05:32:58Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      networkoperator.openshift.io/ip-family-mode: single-stack
    creationTimestamp: "2023-01-09T04:44:58Z"
    generateName: ovnkube-node-
    labels:
      app: ovnkube-node
      component: network
      controller-revision-hash: 846ff6444c
      kubernetes.io/os: linux
      openshift.io/component: network
      pod-template-generation: "1"
      type: infra
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:networkoperator.openshift.io/ip-family-mode: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:controller-revision-hash: {}
            f:kubernetes.io/os: {}
            f:openshift.io/component: {}
            f:pod-template-generation: {}
            f:type: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a3dc2142-2757-4f53-8296-f18a872cae65"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rbac-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9103,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"kube-rbac-proxy-ovn-metrics"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9105,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"ovn-acl-logging"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/ovn"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovn-controller"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/dev/log"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/ovn"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovnkube-node"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_CONTROLLER_INACTIVITY_PROBE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":29103,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/cni-bin-dir"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/systemd/system"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/netns"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn-kubernetes/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovnkube-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/cni/networks/ovn-k8s-cni-overlay"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"env-overrides"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"etc-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-netd"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-run-netns"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-run-ovn-kubernetes"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-slash"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-var-lib-cni-networks-ovn-kubernetes"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"log-socket"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"node-log"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"ovn-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"ovn-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"ovn-node-metrics-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"ovnkube-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"run-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"run-ovn"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"systemd-units"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-01-09T04:44:58Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              f:status: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.130.201"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-01-09T04:45:30Z"
    name: ovnkube-node-m56wh
    namespace: openshift-ovn-kubernetes
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: ovnkube-node
      uid: a3dc2142-2757-4f53-8296-f18a872cae65
    resourceVersion: "16320"
    uid: cf72e8cd-da33-420b-952b-5b2ac5773189
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-0-130-201.us-east-2.compute.internal
    containers:
    - command:
      - /bin/bash
      - -c
      - "set -e\nif [[ -f \"/env/${K8S_NODE}\" ]]; then\n  set -o allexport\n  source
        \"/env/${K8S_NODE}\"\n  set +o allexport\nfi  \n\necho \"$(date -Iseconds)
        - starting ovn-controller\"\nexec ovn-controller unix:/var/run/openvswitch/db.sock
        -vfile:off \\\n  --no-chdir --pidfile=/var/run/ovn/ovn-controller.pid \\\n
        \ --syslog-method=\"null\" \\\n  --log-file=/var/log/ovn/acl-audit-log.log
        \\\n  -vFACILITY:\"local0\" \\\n  -p /ovn-cert/tls.key -c /ovn-cert/tls.crt
        -C /ovn-ca/ca-bundle.crt \\\n  -vconsole:\"${OVN_LOG_LEVEL}\" -vconsole:\"acl_log:off\"
        \\\n  -vPATTERN:console:\"%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\" \\\n
        \ -vsyslog:\"acl_log:info\" \\\n  -vfile:\"acl_log:info\"\n"
      env:
      - name: OVN_LOG_LEVEL
        value: info
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-controller
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /run/openvswitch
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /etc/openvswitch
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch
        name: var-lib-openvswitch
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/log/ovn
        name: node-log
      - mountPath: /dev/log
        name: log-socket
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vmvqn
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - "set -euo pipefail\n\n# Rotate audit log files when then get to max size (in
        bytes)\nMAXFILESIZE=$(( \"50\"*1000000 )) \nLOGFILE=/var/log/ovn/acl-audit-log.log\nCONTROLLERPID=$(cat
        /run/ovn/ovn-controller.pid)\n\n# Redirect err to null so no messages are
        shown upon rotation\ntail -F ${LOGFILE} 2> /dev/null &\n\nwhile true\ndo\n
        \ # Make sure ovn-controller's logfile exists, and get current size in bytes
        \n  if [ -f \"$LOGFILE\" ]; then \n    file_size=`du -b ${LOGFILE} | tr -s
        '\\t' ' ' | cut -d' ' -f1`\n  else \n    ovs-appctl -t /var/run/ovn/ovn-controller.${CONTROLLERPID}.ctl
        vlog/reopen\n    file_size=`du -b ${LOGFILE} | tr -s '\\t' ' ' | cut -d' '
        -f1`\n  fi \n  \n  if [ $file_size -gt $MAXFILESIZE ];then\n    echo \"Rotating
        OVN ACL Log File\"\n    timestamp=`date '+%Y-%m-%dT%H-%M-%S'`\n    mv ${LOGFILE}
        /var/log/ovn/acl-audit-log.$timestamp.log\n    ovs-appctl -t /run/ovn/ovn-controller.${CONTROLLERPID}.ctl
        vlog/reopen\n    CONTROLLERPID=$(cat /run/ovn/ovn-controller.pid)\n  fi\n\n
        \ # sleep for 30 seconds to avoid wasting CPU \n  sleep 30 \ndone\n"
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-acl-logging
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/log/ovn
        name: node-log
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vmvqn
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        # If it isn't created there is probably an issue so we want to crashloop.
        retries=0
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9103 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29103/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy
      ports:
      - containerPort: 9103
        hostPort: 9103
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-node-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vmvqn
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        # If it isn't created there is probably an issue so we want to crashloop.
        retries=0
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9105 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29105/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy-ovn-metrics
      ports:
      - containerPort: 9105
        hostPort: 9105
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-node-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vmvqn
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        set -xe
        if [[ -f "/env/${K8S_NODE}" ]]; then
          set -o allexport
          source "/env/${K8S_NODE}"
          set +o allexport
        fi
        cp -f /usr/libexec/cni/ovn-k8s-cni-overlay /cni-bin-dir/
        ovn_config_namespace=openshift-ovn-kubernetes
        echo "I$(date "+%m%d %H:%M:%S.%N") - disable conntrack on geneve port"
        iptables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
        iptables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
        ip6tables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
        ip6tables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
        echo "I$(date "+%m%d %H:%M:%S.%N") - starting ovnkube-node"

        if [ "shared" == "shared" ]; then
          gateway_mode_flags="--gateway-mode shared --gateway-interface br-ex"
        elif [ "shared" == "local" ]; then
          gateway_mode_flags="--gateway-mode local --gateway-interface br-ex"
        else
          echo "Invalid OVN_GATEWAY_MODE: \"shared\". Must be \"local\" or \"shared\"."
          exit 1
        fi

        export_network_flows_flags=
        if [[ -n "${NETFLOW_COLLECTORS}" ]] ; then
          export_network_flows_flags="--netflow-targets ${NETFLOW_COLLECTORS}"
        fi
        if [[ -n "${SFLOW_COLLECTORS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --sflow-targets ${SFLOW_COLLECTORS}"
        fi
        if [[ -n "${IPFIX_COLLECTORS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-targets ${IPFIX_COLLECTORS}"
        fi
        if [[ -n "${IPFIX_CACHE_MAX_FLOWS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-cache-max-flows ${IPFIX_CACHE_MAX_FLOWS}"
        fi
        if [[ -n "${IPFIX_CACHE_ACTIVE_TIMEOUT}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-cache-active-timeout ${IPFIX_CACHE_ACTIVE_TIMEOUT}"
        fi
        if [[ -n "${IPFIX_SAMPLING}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-sampling ${IPFIX_SAMPLING}"
        fi
        gw_interface_flag=
        # if br-ex1 is configured on the node, we want to use it for external gateway traffic
        if [ -d /sys/class/net/br-ex1 ]; then
          gw_interface_flag="--exgw-interface=br-ex1"
        fi

        node_mgmt_port_netdev_flags=
        if [[ -n "${OVNKUBE_NODE_MGMT_PORT_NETDEV}" ]] ; then
          node_mgmt_port_netdev_flags="--ovnkube-node-mgmt-port-netdev ${OVNKUBE_NODE_MGMT_PORT_NETDEV}"
        fi

        exec /usr/bin/ovnkube --init-node "${K8S_NODE}" \
          --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --nb-client-privkey /ovn-cert/tls.key \
          --nb-client-cert /ovn-cert/tls.crt \
          --nb-client-cacert /ovn-ca/ca-bundle.crt \
          --nb-cert-common-name "ovn" \
          --sb-client-privkey /ovn-cert/tls.key \
          --sb-client-cert /ovn-cert/tls.crt \
          --sb-client-cacert /ovn-ca/ca-bundle.crt \
          --sb-cert-common-name "ovn" \
          --config-file=/run/ovnkube-config/ovnkube.conf \
          --loglevel "${OVN_KUBE_LOG_LEVEL}" \
          --inactivity-probe="${OVN_CONTROLLER_INACTIVITY_PROBE}" \
          ${gateway_mode_flags} \
          --metrics-bind-address "127.0.0.1:29103" \
          --ovn-metrics-bind-address "127.0.0.1:29105" \
          --metrics-enable-pprof \
          --export-ovs-metrics \
          --disable-snat-multiple-gws \
          ${export_network_flows_flags} \
          ${gw_interface_flag}
      env:
      - name: KUBERNETES_SERVICE_PORT
        value: "6443"
      - name: KUBERNETES_SERVICE_HOST
        value: api-int.sn-loggvls-jsm.qe.devcluster.openshift.com
      - name: OVN_CONTROLLER_INACTIVITY_PROBE
        value: "180000"
      - name: OVN_KUBE_LOG_LEVEL
        value: "4"
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - rm
            - -f
            - /etc/cni/net.d/10-ovn-kubernetes.conf
      name: ovnkube-node
      ports:
      - containerPort: 29103
        hostPort: 29103
        name: metrics-port
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - test
          - -f
          - /etc/cni/net.d/10-ovn-kubernetes.conf
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/systemd/system
        name: systemd-units
        readOnly: true
      - mountPath: /host
        mountPropagation: HostToContainer
        name: host-slash
        readOnly: true
      - mountPath: /run/ovn-kubernetes/
        name: host-run-ovn-kubernetes
      - mountPath: /run/netns
        mountPropagation: HostToContainer
        name: host-run-netns
        readOnly: true
      - mountPath: /cni-bin-dir
        name: host-cni-bin
      - mountPath: /etc/cni/net.d
        name: host-cni-netd
      - mountPath: /var/lib/cni/networks/ovn-k8s-cni-overlay
        name: host-var-lib-cni-networks-ovn-kubernetes
      - mountPath: /run/openvswitch
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /etc/openvswitch
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch
        name: var-lib-openvswitch
      - mountPath: /run/ovnkube-config/
        name: ovnkube-config
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vmvqn
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-10-0-130-201.us-east-2.compute.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ovn-kubernetes-node
    serviceAccountName: ovn-kubernetes-node
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - hostPath:
        path: /etc/systemd/system
        type: ""
      name: systemd-units
    - hostPath:
        path: /
        type: ""
      name: host-slash
    - hostPath:
        path: /run/netns
        type: ""
      name: host-run-netns
    - hostPath:
        path: /var/lib/openvswitch/data
        type: ""
      name: var-lib-openvswitch
    - hostPath:
        path: /etc/openvswitch
        type: ""
      name: etc-openvswitch
    - hostPath:
        path: /var/run/openvswitch
        type: ""
      name: run-openvswitch
    - hostPath:
        path: /var/run/ovn
        type: ""
      name: run-ovn
    - hostPath:
        path: /var/log/ovn
        type: ""
      name: node-log
    - hostPath:
        path: /dev/log
        type: ""
      name: log-socket
    - hostPath:
        path: /run/ovn-kubernetes
        type: ""
      name: host-run-ovn-kubernetes
    - hostPath:
        path: /var/lib/cni/bin
        type: ""
      name: host-cni-bin
    - hostPath:
        path: /var/run/multus/cni/net.d
        type: ""
      name: host-cni-netd
    - hostPath:
        path: /var/lib/cni/networks/ovn-k8s-cni-overlay
        type: ""
      name: host-var-lib-cni-networks-ovn-kubernetes
    - configMap:
        defaultMode: 420
        name: ovnkube-config
      name: ovnkube-config
    - configMap:
        defaultMode: 420
        name: env-overrides
        optional: true
      name: env-overrides
    - configMap:
        defaultMode: 420
        name: ovn-ca
      name: ovn-ca
    - name: ovn-cert
      secret:
        defaultMode: 420
        secretName: ovn-cert
    - name: ovn-node-metrics-cert
      secret:
        defaultMode: 420
        optional: true
        secretName: ovn-node-metrics-cert
    - name: kube-api-access-vmvqn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:44:58Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:45:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:45:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:44:58Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://a326a491c5c9581e4706194100f332221a3ed4a44a97bfc1f130f9dfc1d07b34
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:45:22Z"
    - containerID: cri-o://21f67eaa825685ee6f876d8d31b4266022ba12d7be9b9d6c8091aaaa6a84abde
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy-ovn-metrics
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:45:22Z"
    - containerID: cri-o://6c58d1b134dd6eafe1845b78f916fe2d5abedcda673db69d997e156608a7cfc5
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-acl-logging
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:45:20Z"
    - containerID: cri-o://da2c6c4c223057374e0f35101c547ba037ec68340a2bc7240f0984a6e652f4b2
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:45:20Z"
    - containerID: cri-o://2a55e60ab618b2001dba3a852c42c3c804e8a30a367d509b275291edfcda7c18
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovnkube-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:45:22Z"
    hostIP: 10.0.130.201
    phase: Running
    podIP: 10.0.130.201
    podIPs:
    - ip: 10.0.130.201
    qosClass: Burstable
    startTime: "2023-01-09T04:44:58Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      networkoperator.openshift.io/ip-family-mode: single-stack
    creationTimestamp: "2023-01-09T04:39:03Z"
    generateName: ovnkube-node-
    labels:
      app: ovnkube-node
      component: network
      controller-revision-hash: 846ff6444c
      kubernetes.io/os: linux
      openshift.io/component: network
      pod-template-generation: "1"
      type: infra
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:networkoperator.openshift.io/ip-family-mode: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:controller-revision-hash: {}
            f:kubernetes.io/os: {}
            f:openshift.io/component: {}
            f:pod-template-generation: {}
            f:type: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a3dc2142-2757-4f53-8296-f18a872cae65"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rbac-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9103,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"kube-rbac-proxy-ovn-metrics"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9105,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"ovn-acl-logging"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/ovn"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovn-controller"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/dev/log"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/ovn"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovnkube-node"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_CONTROLLER_INACTIVITY_PROBE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":29103,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/cni-bin-dir"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/systemd/system"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/netns"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn-kubernetes/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovnkube-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/cni/networks/ovn-k8s-cni-overlay"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"env-overrides"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"etc-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-netd"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-run-netns"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-run-ovn-kubernetes"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-slash"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-var-lib-cni-networks-ovn-kubernetes"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"log-socket"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"node-log"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"ovn-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"ovn-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"ovn-node-metrics-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"ovnkube-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"run-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"run-ovn"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"systemd-units"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-01-09T04:39:03Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.160.211"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-01-09T04:40:46Z"
    name: ovnkube-node-q28vb
    namespace: openshift-ovn-kubernetes
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: ovnkube-node
      uid: a3dc2142-2757-4f53-8296-f18a872cae65
    resourceVersion: "3728"
    uid: 36285c85-33ae-41da-bf57-66ae4981a950
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-0-160-211.us-east-2.compute.internal
    containers:
    - command:
      - /bin/bash
      - -c
      - "set -e\nif [[ -f \"/env/${K8S_NODE}\" ]]; then\n  set -o allexport\n  source
        \"/env/${K8S_NODE}\"\n  set +o allexport\nfi  \n\necho \"$(date -Iseconds)
        - starting ovn-controller\"\nexec ovn-controller unix:/var/run/openvswitch/db.sock
        -vfile:off \\\n  --no-chdir --pidfile=/var/run/ovn/ovn-controller.pid \\\n
        \ --syslog-method=\"null\" \\\n  --log-file=/var/log/ovn/acl-audit-log.log
        \\\n  -vFACILITY:\"local0\" \\\n  -p /ovn-cert/tls.key -c /ovn-cert/tls.crt
        -C /ovn-ca/ca-bundle.crt \\\n  -vconsole:\"${OVN_LOG_LEVEL}\" -vconsole:\"acl_log:off\"
        \\\n  -vPATTERN:console:\"%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\" \\\n
        \ -vsyslog:\"acl_log:info\" \\\n  -vfile:\"acl_log:info\"\n"
      env:
      - name: OVN_LOG_LEVEL
        value: info
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-controller
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /run/openvswitch
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /etc/openvswitch
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch
        name: var-lib-openvswitch
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/log/ovn
        name: node-log
      - mountPath: /dev/log
        name: log-socket
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zmjn6
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - "set -euo pipefail\n\n# Rotate audit log files when then get to max size (in
        bytes)\nMAXFILESIZE=$(( \"50\"*1000000 )) \nLOGFILE=/var/log/ovn/acl-audit-log.log\nCONTROLLERPID=$(cat
        /run/ovn/ovn-controller.pid)\n\n# Redirect err to null so no messages are
        shown upon rotation\ntail -F ${LOGFILE} 2> /dev/null &\n\nwhile true\ndo\n
        \ # Make sure ovn-controller's logfile exists, and get current size in bytes
        \n  if [ -f \"$LOGFILE\" ]; then \n    file_size=`du -b ${LOGFILE} | tr -s
        '\\t' ' ' | cut -d' ' -f1`\n  else \n    ovs-appctl -t /var/run/ovn/ovn-controller.${CONTROLLERPID}.ctl
        vlog/reopen\n    file_size=`du -b ${LOGFILE} | tr -s '\\t' ' ' | cut -d' '
        -f1`\n  fi \n  \n  if [ $file_size -gt $MAXFILESIZE ];then\n    echo \"Rotating
        OVN ACL Log File\"\n    timestamp=`date '+%Y-%m-%dT%H-%M-%S'`\n    mv ${LOGFILE}
        /var/log/ovn/acl-audit-log.$timestamp.log\n    ovs-appctl -t /run/ovn/ovn-controller.${CONTROLLERPID}.ctl
        vlog/reopen\n    CONTROLLERPID=$(cat /run/ovn/ovn-controller.pid)\n  fi\n\n
        \ # sleep for 30 seconds to avoid wasting CPU \n  sleep 30 \ndone\n"
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-acl-logging
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/log/ovn
        name: node-log
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zmjn6
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        # If it isn't created there is probably an issue so we want to crashloop.
        retries=0
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9103 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29103/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy
      ports:
      - containerPort: 9103
        hostPort: 9103
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-node-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zmjn6
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        # If it isn't created there is probably an issue so we want to crashloop.
        retries=0
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9105 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29105/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy-ovn-metrics
      ports:
      - containerPort: 9105
        hostPort: 9105
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-node-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zmjn6
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        set -xe
        if [[ -f "/env/${K8S_NODE}" ]]; then
          set -o allexport
          source "/env/${K8S_NODE}"
          set +o allexport
        fi
        cp -f /usr/libexec/cni/ovn-k8s-cni-overlay /cni-bin-dir/
        ovn_config_namespace=openshift-ovn-kubernetes
        echo "I$(date "+%m%d %H:%M:%S.%N") - disable conntrack on geneve port"
        iptables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
        iptables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
        ip6tables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
        ip6tables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
        echo "I$(date "+%m%d %H:%M:%S.%N") - starting ovnkube-node"

        if [ "shared" == "shared" ]; then
          gateway_mode_flags="--gateway-mode shared --gateway-interface br-ex"
        elif [ "shared" == "local" ]; then
          gateway_mode_flags="--gateway-mode local --gateway-interface br-ex"
        else
          echo "Invalid OVN_GATEWAY_MODE: \"shared\". Must be \"local\" or \"shared\"."
          exit 1
        fi

        export_network_flows_flags=
        if [[ -n "${NETFLOW_COLLECTORS}" ]] ; then
          export_network_flows_flags="--netflow-targets ${NETFLOW_COLLECTORS}"
        fi
        if [[ -n "${SFLOW_COLLECTORS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --sflow-targets ${SFLOW_COLLECTORS}"
        fi
        if [[ -n "${IPFIX_COLLECTORS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-targets ${IPFIX_COLLECTORS}"
        fi
        if [[ -n "${IPFIX_CACHE_MAX_FLOWS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-cache-max-flows ${IPFIX_CACHE_MAX_FLOWS}"
        fi
        if [[ -n "${IPFIX_CACHE_ACTIVE_TIMEOUT}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-cache-active-timeout ${IPFIX_CACHE_ACTIVE_TIMEOUT}"
        fi
        if [[ -n "${IPFIX_SAMPLING}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-sampling ${IPFIX_SAMPLING}"
        fi
        gw_interface_flag=
        # if br-ex1 is configured on the node, we want to use it for external gateway traffic
        if [ -d /sys/class/net/br-ex1 ]; then
          gw_interface_flag="--exgw-interface=br-ex1"
        fi

        node_mgmt_port_netdev_flags=
        if [[ -n "${OVNKUBE_NODE_MGMT_PORT_NETDEV}" ]] ; then
          node_mgmt_port_netdev_flags="--ovnkube-node-mgmt-port-netdev ${OVNKUBE_NODE_MGMT_PORT_NETDEV}"
        fi

        exec /usr/bin/ovnkube --init-node "${K8S_NODE}" \
          --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --nb-client-privkey /ovn-cert/tls.key \
          --nb-client-cert /ovn-cert/tls.crt \
          --nb-client-cacert /ovn-ca/ca-bundle.crt \
          --nb-cert-common-name "ovn" \
          --sb-client-privkey /ovn-cert/tls.key \
          --sb-client-cert /ovn-cert/tls.crt \
          --sb-client-cacert /ovn-ca/ca-bundle.crt \
          --sb-cert-common-name "ovn" \
          --config-file=/run/ovnkube-config/ovnkube.conf \
          --loglevel "${OVN_KUBE_LOG_LEVEL}" \
          --inactivity-probe="${OVN_CONTROLLER_INACTIVITY_PROBE}" \
          ${gateway_mode_flags} \
          --metrics-bind-address "127.0.0.1:29103" \
          --ovn-metrics-bind-address "127.0.0.1:29105" \
          --metrics-enable-pprof \
          --export-ovs-metrics \
          --disable-snat-multiple-gws \
          ${export_network_flows_flags} \
          ${gw_interface_flag}
      env:
      - name: KUBERNETES_SERVICE_PORT
        value: "6443"
      - name: KUBERNETES_SERVICE_HOST
        value: api-int.sn-loggvls-jsm.qe.devcluster.openshift.com
      - name: OVN_CONTROLLER_INACTIVITY_PROBE
        value: "180000"
      - name: OVN_KUBE_LOG_LEVEL
        value: "4"
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - rm
            - -f
            - /etc/cni/net.d/10-ovn-kubernetes.conf
      name: ovnkube-node
      ports:
      - containerPort: 29103
        hostPort: 29103
        name: metrics-port
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - test
          - -f
          - /etc/cni/net.d/10-ovn-kubernetes.conf
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/systemd/system
        name: systemd-units
        readOnly: true
      - mountPath: /host
        mountPropagation: HostToContainer
        name: host-slash
        readOnly: true
      - mountPath: /run/ovn-kubernetes/
        name: host-run-ovn-kubernetes
      - mountPath: /run/netns
        mountPropagation: HostToContainer
        name: host-run-netns
        readOnly: true
      - mountPath: /cni-bin-dir
        name: host-cni-bin
      - mountPath: /etc/cni/net.d
        name: host-cni-netd
      - mountPath: /var/lib/cni/networks/ovn-k8s-cni-overlay
        name: host-var-lib-cni-networks-ovn-kubernetes
      - mountPath: /run/openvswitch
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /etc/openvswitch
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch
        name: var-lib-openvswitch
      - mountPath: /run/ovnkube-config/
        name: ovnkube-config
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zmjn6
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-10-0-160-211.us-east-2.compute.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ovn-kubernetes-node
    serviceAccountName: ovn-kubernetes-node
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - hostPath:
        path: /etc/systemd/system
        type: ""
      name: systemd-units
    - hostPath:
        path: /
        type: ""
      name: host-slash
    - hostPath:
        path: /run/netns
        type: ""
      name: host-run-netns
    - hostPath:
        path: /var/lib/openvswitch/data
        type: ""
      name: var-lib-openvswitch
    - hostPath:
        path: /etc/openvswitch
        type: ""
      name: etc-openvswitch
    - hostPath:
        path: /var/run/openvswitch
        type: ""
      name: run-openvswitch
    - hostPath:
        path: /var/run/ovn
        type: ""
      name: run-ovn
    - hostPath:
        path: /var/log/ovn
        type: ""
      name: node-log
    - hostPath:
        path: /dev/log
        type: ""
      name: log-socket
    - hostPath:
        path: /run/ovn-kubernetes
        type: ""
      name: host-run-ovn-kubernetes
    - hostPath:
        path: /var/lib/cni/bin
        type: ""
      name: host-cni-bin
    - hostPath:
        path: /var/run/multus/cni/net.d
        type: ""
      name: host-cni-netd
    - hostPath:
        path: /var/lib/cni/networks/ovn-k8s-cni-overlay
        type: ""
      name: host-var-lib-cni-networks-ovn-kubernetes
    - configMap:
        defaultMode: 420
        name: ovnkube-config
      name: ovnkube-config
    - configMap:
        defaultMode: 420
        name: env-overrides
        optional: true
      name: env-overrides
    - configMap:
        defaultMode: 420
        name: ovn-ca
      name: ovn-ca
    - name: ovn-cert
      secret:
        defaultMode: 420
        secretName: ovn-cert
    - name: ovn-node-metrics-cert
      secret:
        defaultMode: 420
        optional: true
        secretName: ovn-node-metrics-cert
    - name: kube-api-access-zmjn6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:39:06Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:40:46Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:40:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:39:03Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://979bdccdb4266d6f5bf70370ead59266c33402423d29ebb3f0fa37670ef0736b
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:24Z"
    - containerID: cri-o://65d32f982a303f562b0c0efc6059c7d0cd61352d26584c83180d58f242018d9f
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy-ovn-metrics
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:24Z"
    - containerID: cri-o://84644d975e9869339de52fed0c3b4470ca6a8d1ce63bf13558ad5f25fbc39468
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-acl-logging
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:22Z"
    - containerID: cri-o://ea21082e9eae897e60f334238fd7481e95c94d936f9894bcc471bd5487c7fdc9
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:21Z"
    - containerID: cri-o://f35b1eda5d8148b551de4f2020bcfee1058e2c57b54a780404ca74fc0a6b9510
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovnkube-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:24Z"
    hostIP: 10.0.160.211
    phase: Running
    podIP: 10.0.160.211
    podIPs:
    - ip: 10.0.160.211
    qosClass: Burstable
    startTime: "2023-01-09T04:39:06Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      networkoperator.openshift.io/ip-family-mode: single-stack
    creationTimestamp: "2023-01-09T04:39:03Z"
    generateName: ovnkube-node-
    labels:
      app: ovnkube-node
      component: network
      controller-revision-hash: 846ff6444c
      kubernetes.io/os: linux
      openshift.io/component: network
      pod-template-generation: "1"
      type: infra
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:networkoperator.openshift.io/ip-family-mode: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:controller-revision-hash: {}
            f:kubernetes.io/os: {}
            f:openshift.io/component: {}
            f:pod-template-generation: {}
            f:type: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a3dc2142-2757-4f53-8296-f18a872cae65"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rbac-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9103,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"kube-rbac-proxy-ovn-metrics"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9105,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
            k:{"name":"ovn-acl-logging"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/ovn"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovn-controller"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"OVN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/dev/log"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/ovn"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"ovnkube-node"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"K8S_NODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_CONTROLLER_INACTIVITY_PROBE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":29103,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/cni-bin-dir"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/env"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/systemd/system"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/ovn-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/ovn-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/netns"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn-kubernetes/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovn/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/ovnkube-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/cni/networks/ovn-k8s-cni-overlay"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"env-overrides"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"etc-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-netd"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-run-netns"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-run-ovn-kubernetes"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-slash"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-var-lib-cni-networks-ovn-kubernetes"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"log-socket"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"node-log"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"ovn-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"ovn-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"ovn-node-metrics-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"ovnkube-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"run-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"run-ovn"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"systemd-units"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-openvswitch"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-01-09T04:39:03Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.145.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-01-09T04:40:43Z"
    name: ovnkube-node-vnjnv
    namespace: openshift-ovn-kubernetes
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: ovnkube-node
      uid: a3dc2142-2757-4f53-8296-f18a872cae65
    resourceVersion: "3711"
    uid: fb7e55ac-b5bc-43ca-b7eb-728ed0e581bf
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-0-145-4.us-east-2.compute.internal
    containers:
    - command:
      - /bin/bash
      - -c
      - "set -e\nif [[ -f \"/env/${K8S_NODE}\" ]]; then\n  set -o allexport\n  source
        \"/env/${K8S_NODE}\"\n  set +o allexport\nfi  \n\necho \"$(date -Iseconds)
        - starting ovn-controller\"\nexec ovn-controller unix:/var/run/openvswitch/db.sock
        -vfile:off \\\n  --no-chdir --pidfile=/var/run/ovn/ovn-controller.pid \\\n
        \ --syslog-method=\"null\" \\\n  --log-file=/var/log/ovn/acl-audit-log.log
        \\\n  -vFACILITY:\"local0\" \\\n  -p /ovn-cert/tls.key -c /ovn-cert/tls.crt
        -C /ovn-ca/ca-bundle.crt \\\n  -vconsole:\"${OVN_LOG_LEVEL}\" -vconsole:\"acl_log:off\"
        \\\n  -vPATTERN:console:\"%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\" \\\n
        \ -vsyslog:\"acl_log:info\" \\\n  -vfile:\"acl_log:info\"\n"
      env:
      - name: OVN_LOG_LEVEL
        value: info
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-controller
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /run/openvswitch
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /etc/openvswitch
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch
        name: var-lib-openvswitch
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/log/ovn
        name: node-log
      - mountPath: /dev/log
        name: log-socket
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hjht8
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - "set -euo pipefail\n\n# Rotate audit log files when then get to max size (in
        bytes)\nMAXFILESIZE=$(( \"50\"*1000000 )) \nLOGFILE=/var/log/ovn/acl-audit-log.log\nCONTROLLERPID=$(cat
        /run/ovn/ovn-controller.pid)\n\n# Redirect err to null so no messages are
        shown upon rotation\ntail -F ${LOGFILE} 2> /dev/null &\n\nwhile true\ndo\n
        \ # Make sure ovn-controller's logfile exists, and get current size in bytes
        \n  if [ -f \"$LOGFILE\" ]; then \n    file_size=`du -b ${LOGFILE} | tr -s
        '\\t' ' ' | cut -d' ' -f1`\n  else \n    ovs-appctl -t /var/run/ovn/ovn-controller.${CONTROLLERPID}.ctl
        vlog/reopen\n    file_size=`du -b ${LOGFILE} | tr -s '\\t' ' ' | cut -d' '
        -f1`\n  fi \n  \n  if [ $file_size -gt $MAXFILESIZE ];then\n    echo \"Rotating
        OVN ACL Log File\"\n    timestamp=`date '+%Y-%m-%dT%H-%M-%S'`\n    mv ${LOGFILE}
        /var/log/ovn/acl-audit-log.$timestamp.log\n    ovs-appctl -t /run/ovn/ovn-controller.${CONTROLLERPID}.ctl
        vlog/reopen\n    CONTROLLERPID=$(cat /run/ovn/ovn-controller.pid)\n  fi\n\n
        \ # sleep for 30 seconds to avoid wasting CPU \n  sleep 30 \ndone\n"
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      name: ovn-acl-logging
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/log/ovn
        name: node-log
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hjht8
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        # If it isn't created there is probably an issue so we want to crashloop.
        retries=0
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9103 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29103/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy
      ports:
      - containerPort: 9103
        hostPort: 9103
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-node-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hjht8
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        TLS_PK=/etc/pki/tls/metrics-cert/tls.key
        TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
        # As the secret mount is optional we must wait for the files to be present.
        # The service is created in monitor.yaml and this is created in sdn.yaml.
        # If it isn't created there is probably an issue so we want to crashloop.
        retries=0
        TS=$(date +%s)
        WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
        HAS_LOGGED_INFO=0

        log_missing_certs(){
            CUR_TS=$(date +%s)
            if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
              echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
            elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
              echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
              HAS_LOGGED_INFO=1
            fi
        }
        while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
          log_missing_certs
          sleep 5
        done

        echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
        exec /usr/bin/kube-rbac-proxy \
          --logtostderr \
          --secure-listen-address=:9105 \
          --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
          --upstream=http://127.0.0.1:29105/ \
          --tls-private-key-file=${TLS_PK} \
          --tls-cert-file=${TLS_CERT}
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy-ovn-metrics
      ports:
      - containerPort: 9105
        hostPort: 9105
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/pki/tls/metrics-cert
        name: ovn-node-metrics-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hjht8
        readOnly: true
    - command:
      - /bin/bash
      - -c
      - |
        set -xe
        if [[ -f "/env/${K8S_NODE}" ]]; then
          set -o allexport
          source "/env/${K8S_NODE}"
          set +o allexport
        fi
        cp -f /usr/libexec/cni/ovn-k8s-cni-overlay /cni-bin-dir/
        ovn_config_namespace=openshift-ovn-kubernetes
        echo "I$(date "+%m%d %H:%M:%S.%N") - disable conntrack on geneve port"
        iptables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
        iptables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
        ip6tables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
        ip6tables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
        echo "I$(date "+%m%d %H:%M:%S.%N") - starting ovnkube-node"

        if [ "shared" == "shared" ]; then
          gateway_mode_flags="--gateway-mode shared --gateway-interface br-ex"
        elif [ "shared" == "local" ]; then
          gateway_mode_flags="--gateway-mode local --gateway-interface br-ex"
        else
          echo "Invalid OVN_GATEWAY_MODE: \"shared\". Must be \"local\" or \"shared\"."
          exit 1
        fi

        export_network_flows_flags=
        if [[ -n "${NETFLOW_COLLECTORS}" ]] ; then
          export_network_flows_flags="--netflow-targets ${NETFLOW_COLLECTORS}"
        fi
        if [[ -n "${SFLOW_COLLECTORS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --sflow-targets ${SFLOW_COLLECTORS}"
        fi
        if [[ -n "${IPFIX_COLLECTORS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-targets ${IPFIX_COLLECTORS}"
        fi
        if [[ -n "${IPFIX_CACHE_MAX_FLOWS}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-cache-max-flows ${IPFIX_CACHE_MAX_FLOWS}"
        fi
        if [[ -n "${IPFIX_CACHE_ACTIVE_TIMEOUT}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-cache-active-timeout ${IPFIX_CACHE_ACTIVE_TIMEOUT}"
        fi
        if [[ -n "${IPFIX_SAMPLING}" ]] ; then
          export_network_flows_flags="$export_network_flows_flags --ipfix-sampling ${IPFIX_SAMPLING}"
        fi
        gw_interface_flag=
        # if br-ex1 is configured on the node, we want to use it for external gateway traffic
        if [ -d /sys/class/net/br-ex1 ]; then
          gw_interface_flag="--exgw-interface=br-ex1"
        fi

        node_mgmt_port_netdev_flags=
        if [[ -n "${OVNKUBE_NODE_MGMT_PORT_NETDEV}" ]] ; then
          node_mgmt_port_netdev_flags="--ovnkube-node-mgmt-port-netdev ${OVNKUBE_NODE_MGMT_PORT_NETDEV}"
        fi

        exec /usr/bin/ovnkube --init-node "${K8S_NODE}" \
          --nb-address "ssl:10.0.145.4:9641,ssl:10.0.160.211:9641,ssl:10.0.199.219:9641" \
          --sb-address "ssl:10.0.145.4:9642,ssl:10.0.160.211:9642,ssl:10.0.199.219:9642" \
          --nb-client-privkey /ovn-cert/tls.key \
          --nb-client-cert /ovn-cert/tls.crt \
          --nb-client-cacert /ovn-ca/ca-bundle.crt \
          --nb-cert-common-name "ovn" \
          --sb-client-privkey /ovn-cert/tls.key \
          --sb-client-cert /ovn-cert/tls.crt \
          --sb-client-cacert /ovn-ca/ca-bundle.crt \
          --sb-cert-common-name "ovn" \
          --config-file=/run/ovnkube-config/ovnkube.conf \
          --loglevel "${OVN_KUBE_LOG_LEVEL}" \
          --inactivity-probe="${OVN_CONTROLLER_INACTIVITY_PROBE}" \
          ${gateway_mode_flags} \
          --metrics-bind-address "127.0.0.1:29103" \
          --ovn-metrics-bind-address "127.0.0.1:29105" \
          --metrics-enable-pprof \
          --export-ovs-metrics \
          --disable-snat-multiple-gws \
          ${export_network_flows_flags} \
          ${gw_interface_flag}
      env:
      - name: KUBERNETES_SERVICE_PORT
        value: "6443"
      - name: KUBERNETES_SERVICE_HOST
        value: api-int.sn-loggvls-jsm.qe.devcluster.openshift.com
      - name: OVN_CONTROLLER_INACTIVITY_PROBE
        value: "180000"
      - name: OVN_KUBE_LOG_LEVEL
        value: "4"
      - name: K8S_NODE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - rm
            - -f
            - /etc/cni/net.d/10-ovn-kubernetes.conf
      name: ovnkube-node
      ports:
      - containerPort: 29103
        hostPort: 29103
        name: metrics-port
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - test
          - -f
          - /etc/cni/net.d/10-ovn-kubernetes.conf
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
          memory: 300Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/systemd/system
        name: systemd-units
        readOnly: true
      - mountPath: /host
        mountPropagation: HostToContainer
        name: host-slash
        readOnly: true
      - mountPath: /run/ovn-kubernetes/
        name: host-run-ovn-kubernetes
      - mountPath: /run/netns
        mountPropagation: HostToContainer
        name: host-run-netns
        readOnly: true
      - mountPath: /cni-bin-dir
        name: host-cni-bin
      - mountPath: /etc/cni/net.d
        name: host-cni-netd
      - mountPath: /var/lib/cni/networks/ovn-k8s-cni-overlay
        name: host-var-lib-cni-networks-ovn-kubernetes
      - mountPath: /run/openvswitch
        name: run-openvswitch
      - mountPath: /run/ovn/
        name: run-ovn
      - mountPath: /etc/openvswitch
        name: etc-openvswitch
      - mountPath: /etc/ovn/
        name: etc-openvswitch
      - mountPath: /var/lib/openvswitch
        name: var-lib-openvswitch
      - mountPath: /run/ovnkube-config/
        name: ovnkube-config
      - mountPath: /env
        name: env-overrides
      - mountPath: /ovn-cert
        name: ovn-cert
      - mountPath: /ovn-ca
        name: ovn-ca
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hjht8
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: ip-10-0-145-4.us-east-2.compute.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ovn-kubernetes-node
    serviceAccountName: ovn-kubernetes-node
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - hostPath:
        path: /etc/systemd/system
        type: ""
      name: systemd-units
    - hostPath:
        path: /
        type: ""
      name: host-slash
    - hostPath:
        path: /run/netns
        type: ""
      name: host-run-netns
    - hostPath:
        path: /var/lib/openvswitch/data
        type: ""
      name: var-lib-openvswitch
    - hostPath:
        path: /etc/openvswitch
        type: ""
      name: etc-openvswitch
    - hostPath:
        path: /var/run/openvswitch
        type: ""
      name: run-openvswitch
    - hostPath:
        path: /var/run/ovn
        type: ""
      name: run-ovn
    - hostPath:
        path: /var/log/ovn
        type: ""
      name: node-log
    - hostPath:
        path: /dev/log
        type: ""
      name: log-socket
    - hostPath:
        path: /run/ovn-kubernetes
        type: ""
      name: host-run-ovn-kubernetes
    - hostPath:
        path: /var/lib/cni/bin
        type: ""
      name: host-cni-bin
    - hostPath:
        path: /var/run/multus/cni/net.d
        type: ""
      name: host-cni-netd
    - hostPath:
        path: /var/lib/cni/networks/ovn-k8s-cni-overlay
        type: ""
      name: host-var-lib-cni-networks-ovn-kubernetes
    - configMap:
        defaultMode: 420
        name: ovnkube-config
      name: ovnkube-config
    - configMap:
        defaultMode: 420
        name: env-overrides
        optional: true
      name: env-overrides
    - configMap:
        defaultMode: 420
        name: ovn-ca
      name: ovn-ca
    - name: ovn-cert
      secret:
        defaultMode: 420
        secretName: ovn-cert
    - name: ovn-node-metrics-cert
      secret:
        defaultMode: 420
        optional: true
        secretName: ovn-node-metrics-cert
    - name: kube-api-access-hjht8
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:39:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:40:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:40:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-09T04:39:03Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://18a3f3319261f41fe661f1ac4d55a60fce1b19a905c5573920714976849df577
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:19Z"
    - containerID: cri-o://e5beac783c41b77f2d5dbcb17f36aea0f413ad41e2cba6e6d1b89a56010bca58
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c28f27a3a10df13e5e8c074e8734683a6603ebaccd9d67e2095070fb6859b1d6
      lastState: {}
      name: kube-rbac-proxy-ovn-metrics
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:19Z"
    - containerID: cri-o://29927130ef2a354874943a6a2415db0c49b50bbd6edd59f7e7e2f4ea06bdaa0e
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-acl-logging
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:17Z"
    - containerID: cri-o://332317b3583ceecc238d609f03dee3befbcdf1682266b4f3326836580f36a0ea
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovn-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:17Z"
    - containerID: cri-o://1a3eab213737b600d828d9bd3339bf58b534a88cf295c1ff4a55745f4eee81f6
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:c74fcd7470b682be673ccbc763ac25783f6997a253c8ca20f63b789520eb65bf
      lastState: {}
      name: ovnkube-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-09T04:39:19Z"
    hostIP: 10.0.145.4
    phase: Running
    podIP: 10.0.145.4
    podIPs:
    - ip: 10.0.145.4
    qosClass: Burstable
    startTime: "2023-01-09T04:39:03Z"
kind: PodList
metadata:
  resourceVersion: "268745"
